From users-return-136555-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Jun 11 21:45:32 2014
Return-Path: <users-return-136555-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 5D06E110AB
	for <apmail-maven-users-archive@www.apache.org>; Wed, 11 Jun 2014 21:45:32 +0000 (UTC)
Received: (qmail 91156 invoked by uid 500); 11 Jun 2014 21:45:30 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 91074 invoked by uid 500); 11 Jun 2014 21:45:27 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 91063 invoked by uid 99); 11 Jun 2014 21:45:27 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 11 Jun 2014 21:45:27 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of bpodgursky@gmail.com designates 209.85.128.181 as permitted sender)
Received: from [209.85.128.181] (HELO mail-ve0-f181.google.com) (209.85.128.181)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 11 Jun 2014 21:45:24 +0000
Received: by mail-ve0-f181.google.com with SMTP id db11so805992veb.40
        for <users@maven.apache.org>; Wed, 11 Jun 2014 14:45:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=PcKj8H0hiLclG+S0HNE2/gq6PqWyZyTw/VHNGeiWKAE=;
        b=ktKooGwkflGVsWxRlTyAZchmdsfq6LI5P79NccgB7tk7gr2xyNaf5yXyq59AUhQqwF
         MxydWj6169W8+6asRvaDKSD4vRXejuPwZ1pgaw0bRTMHz9ZLxL+W/ZBSaYDQp2JVhP0m
         3X3qyIylj6fGbGWHr4WluqgeUUqfu5agsvpsjvrdu+Zvh2cD4sobU5ia4pwCvW9YUopB
         sTTqRHvawyxOPQv5qlECcEHTUmWnNBhX2rUAc0Jcq0XYkt6XzFV14xiqlYzRDDLGncph
         H+dKWZCyKkf7Z/rMO/7EYSJXSmc/JmtruFOvdUlBisPFGEw1SOanmaTj7Yy4zfnFPijs
         XJ/Q==
MIME-Version: 1.0
X-Received: by 10.52.14.130 with SMTP id p2mr4187455vdc.39.1402523100306; Wed,
 11 Jun 2014 14:45:00 -0700 (PDT)
Received: by 10.58.76.105 with HTTP; Wed, 11 Jun 2014 14:45:00 -0700 (PDT)
In-Reply-To: <CAC21K-5hvHLhvyKGhwzrEx+1TT8qLZxOrJmRH5T7-13TtfxKjw@mail.gmail.com>
References: <CAC21K-4EhYedVirNOW8Yp+wbrJQzpnrdWD_nGzssQosqP0Fojg@mail.gmail.com>
	<CAJZRQKzmzMNBkQo97Cw5zv40KFEwhGEBbNYuTOTTz_zswv4m3Q@mail.gmail.com>
	<CAC21K-5hvHLhvyKGhwzrEx+1TT8qLZxOrJmRH5T7-13TtfxKjw@mail.gmail.com>
Date: Wed, 11 Jun 2014 14:45:00 -0700
Message-ID: <CAC21K-5QjHdRYrmOD3fv+JV=tou1zW03GBexZHX-AMUG_okkxA@mail.gmail.com>
Subject: Re: Concurrent maven processes using the same repository failing when
 new snapshot version downloaded
From: Ben Podgursky <bpodgursky@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=20cf302d4fc62ee26e04fb965bd4
X-Virus-Checked: Checked by ClamAV on apache.org

--20cf302d4fc62ee26e04fb965bd4
Content-Type: text/plain; charset=UTF-8

After a bit of hunting, it turns out Jenkins has an option under "Manage
Jenkins" -> "Configure System" -> "Maven Project Configuration" -> "Local
Maven Repository" -> "Local to the executor" which will use an isolated
repository for each executor process, which solves this pretty cleanly.
 Thanks for the tip.


On Wed, Jun 11, 2014 at 1:24 AM, Ben Podgursky <bpodgursky@gmail.com> wrote:

> Thanks Kristian, I'll check that out.  Are there any tickets I could
> follow to keep an eye out for the fix?
>
>
> On Tue, Jun 10, 2014 at 10:55 PM, Kristian Rosenvold <
> kristian.rosenvold@gmail.com> wrote:
>
>> This is a known problem (old one), which might actaully be getting a
>> fix "soon". In the meantime, checkout
>>
>>
>> http://blog.sonatype.com/2009/01/maven-continuous-integration-best-practices/
>>
>> Kristian
>>
>>
>> 2014-06-11 2:27 GMT+02:00 Ben Podgursky <bpodgursky@gmail.com>:
>> > Hi all,
>> >
>> > I'm running into a problem where maven processes using a shared
>> repository
>> > are getting exceptions when a new snapshot dependency is deployed.  Our
>> > setup is:
>> >
>> > - We use Jenkins continuous integration builds.  The builds are just
>> > running a simple "mvn clean deploy".
>> > - Our build machines often run builds for two projects simultaneously.
>> >  When running simultaneously, the builds will share a maven respository.
>> >
>> > We have (for simplification) three projects A, B, and C.  Each of these
>> is
>> > deployed as a snapshot at the end of a successful build.  Projects B
>> and C
>> > each depend on a snapshot version of of project A.
>> >
>> > Intermittently, when projects B and C are running simultaneously on a
>> > machine, the build which started first will begin to fail all tests with
>> > java.lang.NoClassDefFoundError, where the classes not found belong to
>> > project A.  I've verified that the classfiles are present in A's
>> deployed
>> > jar.
>> >
>> > I *believe* what is happening is:
>> >
>> > 1) project B begins building, and starts surefire tests.
>> > 2) project A deploys a new snapshot version (possibly from a different
>> > machine)
>> > 3) project C begings building.  Because our snapshot update policy is
>> set
>> > to "always", it downloads the new version of "A-1.0-SNAPSHOT.jar", and
>> > replaces the previous version in the local respository
>> > 4) the tests for project B start to fail because they are using a
>> reference
>> > to a file which has been deleted
>> >
>> > I've looked into what surefire is putting on the classpath, and even
>> though
>> > the repository has the specific version of the snapshot available, (ex
>> > "A-1.0-20140610.213850-369.jar"), it's putting
>> > "analysis_lib-1.0-SNAPSHOT.jar" on the classpath.  I don't understand
>> why
>> > maven would prefer to use the artifact which could get replaced rather
>> than
>> > the semi-permanent artifact (I understand snapshot versions aren't
>> > permanent, but it would at least survive for the duration of the build.)
>> >
>> > My questions are:
>> >
>> > - does this sequence of events seem plausible, or is there another
>> > explanation to the exceptions I'm seeing?
>> >
>> > - is there a way I can force maven to put the timestamped version of
>> > artifacts on the classpath instead of the SNAPSHOT versions?  I
>> understand
>> > I can specify the timestamp in the pom.xml, but that's not what I
>> want--I
>> > just want it to choose the current version when the build starts, and
>> use
>> > that for the duration of the build.  I'm also familiar with mvn
>> > versions:lock-snapshots, but I'd rather avoid it if possible because
>> (1) it
>> > adds build complexity and (2) it doesn't lock versions pulled in
>> > transitively (ex D -> A -> B, if D was a snapshot), since I don't want
>> to
>> > deploy artifacts with locked versions
>> >
>> >
>> > Thanks for your time,
>> >
>> > Ben
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
>> For additional commands, e-mail: users-help@maven.apache.org
>>
>>
>

--20cf302d4fc62ee26e04fb965bd4--

