From users-return-136554-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Jun 11 08:25:16 2014
Return-Path: <users-return-136554-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 23078113A2
	for <apmail-maven-users-archive@www.apache.org>; Wed, 11 Jun 2014 08:25:16 +0000 (UTC)
Received: (qmail 55402 invoked by uid 500); 11 Jun 2014 08:25:14 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 55318 invoked by uid 500); 11 Jun 2014 08:25:14 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 55307 invoked by uid 99); 11 Jun 2014 08:25:14 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 11 Jun 2014 08:25:14 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of bpodgursky@gmail.com designates 209.85.128.181 as permitted sender)
Received: from [209.85.128.181] (HELO mail-ve0-f181.google.com) (209.85.128.181)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 11 Jun 2014 08:25:09 +0000
Received: by mail-ve0-f181.google.com with SMTP id db11so4889352veb.12
        for <users@maven.apache.org>; Wed, 11 Jun 2014 01:24:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=54/lr9n6m486YnaAY+6eUTCO0jOnZPtgMkYfT5FMF8I=;
        b=hZgu3Mb12W78LeXuQQACDx5CGKiQpf1Rb/WpNrWwey4OAYMwqi4F6gn1/ZxyN2+2Ap
         f1N3opnNLeXXmQZjNBAhIeQwGOux+jUApb/3DZ/VHZyXnCgb48E0P0YmDGttqAE0R7+m
         GbEBhMo/1TPSFAR1VMsBxNbly5rAvNXEaIVShAaYWBoPOE8/RGAybGmtOuTXdRM034Q5
         SwXlor1p8CsdUQvh2tVCVjiv7I76QcsGtHo/ji1t0eleueRzdqYXX8mhmJCcc5es8d2d
         EFZnfKCG5NC8nb5LzYX5HwRuHaqk07ilgVBwWi/7DPSDWt5EHo9YRzYtEYMvWvkW/JyB
         Rteg==
MIME-Version: 1.0
X-Received: by 10.52.141.74 with SMTP id rm10mr2121063vdb.6.1402475089313;
 Wed, 11 Jun 2014 01:24:49 -0700 (PDT)
Received: by 10.58.146.98 with HTTP; Wed, 11 Jun 2014 01:24:49 -0700 (PDT)
In-Reply-To: <CAJZRQKzmzMNBkQo97Cw5zv40KFEwhGEBbNYuTOTTz_zswv4m3Q@mail.gmail.com>
References: <CAC21K-4EhYedVirNOW8Yp+wbrJQzpnrdWD_nGzssQosqP0Fojg@mail.gmail.com>
	<CAJZRQKzmzMNBkQo97Cw5zv40KFEwhGEBbNYuTOTTz_zswv4m3Q@mail.gmail.com>
Date: Wed, 11 Jun 2014 01:24:49 -0700
Message-ID: <CAC21K-5hvHLhvyKGhwzrEx+1TT8qLZxOrJmRH5T7-13TtfxKjw@mail.gmail.com>
Subject: Re: Concurrent maven processes using the same repository failing when
 new snapshot version downloaded
From: Ben Podgursky <bpodgursky@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=bcaec52c5e7b81743704fb8b2dfc
X-Virus-Checked: Checked by ClamAV on apache.org

--bcaec52c5e7b81743704fb8b2dfc
Content-Type: text/plain; charset=UTF-8

Thanks Kristian, I'll check that out.  Are there any tickets I could follow
to keep an eye out for the fix?


On Tue, Jun 10, 2014 at 10:55 PM, Kristian Rosenvold <
kristian.rosenvold@gmail.com> wrote:

> This is a known problem (old one), which might actaully be getting a
> fix "soon". In the meantime, checkout
>
>
> http://blog.sonatype.com/2009/01/maven-continuous-integration-best-practices/
>
> Kristian
>
>
> 2014-06-11 2:27 GMT+02:00 Ben Podgursky <bpodgursky@gmail.com>:
> > Hi all,
> >
> > I'm running into a problem where maven processes using a shared
> repository
> > are getting exceptions when a new snapshot dependency is deployed.  Our
> > setup is:
> >
> > - We use Jenkins continuous integration builds.  The builds are just
> > running a simple "mvn clean deploy".
> > - Our build machines often run builds for two projects simultaneously.
> >  When running simultaneously, the builds will share a maven respository.
> >
> > We have (for simplification) three projects A, B, and C.  Each of these
> is
> > deployed as a snapshot at the end of a successful build.  Projects B and
> C
> > each depend on a snapshot version of of project A.
> >
> > Intermittently, when projects B and C are running simultaneously on a
> > machine, the build which started first will begin to fail all tests with
> > java.lang.NoClassDefFoundError, where the classes not found belong to
> > project A.  I've verified that the classfiles are present in A's deployed
> > jar.
> >
> > I *believe* what is happening is:
> >
> > 1) project B begins building, and starts surefire tests.
> > 2) project A deploys a new snapshot version (possibly from a different
> > machine)
> > 3) project C begings building.  Because our snapshot update policy is set
> > to "always", it downloads the new version of "A-1.0-SNAPSHOT.jar", and
> > replaces the previous version in the local respository
> > 4) the tests for project B start to fail because they are using a
> reference
> > to a file which has been deleted
> >
> > I've looked into what surefire is putting on the classpath, and even
> though
> > the repository has the specific version of the snapshot available, (ex
> > "A-1.0-20140610.213850-369.jar"), it's putting
> > "analysis_lib-1.0-SNAPSHOT.jar" on the classpath.  I don't understand why
> > maven would prefer to use the artifact which could get replaced rather
> than
> > the semi-permanent artifact (I understand snapshot versions aren't
> > permanent, but it would at least survive for the duration of the build.)
> >
> > My questions are:
> >
> > - does this sequence of events seem plausible, or is there another
> > explanation to the exceptions I'm seeing?
> >
> > - is there a way I can force maven to put the timestamped version of
> > artifacts on the classpath instead of the SNAPSHOT versions?  I
> understand
> > I can specify the timestamp in the pom.xml, but that's not what I want--I
> > just want it to choose the current version when the build starts, and use
> > that for the duration of the build.  I'm also familiar with mvn
> > versions:lock-snapshots, but I'd rather avoid it if possible because (1)
> it
> > adds build complexity and (2) it doesn't lock versions pulled in
> > transitively (ex D -> A -> B, if D was a snapshot), since I don't want to
> > deploy artifacts with locked versions
> >
> >
> > Thanks for your time,
> >
> > Ben
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> For additional commands, e-mail: users-help@maven.apache.org
>
>

--bcaec52c5e7b81743704fb8b2dfc--

