From users-return-136552-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Jun 11 00:27:50 2014
Return-Path: <users-return-136552-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 52EE711977
	for <apmail-maven-users-archive@www.apache.org>; Wed, 11 Jun 2014 00:27:50 +0000 (UTC)
Received: (qmail 9106 invoked by uid 500); 11 Jun 2014 00:27:48 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 9025 invoked by uid 500); 11 Jun 2014 00:27:48 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 9014 invoked by uid 99); 11 Jun 2014 00:27:48 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 11 Jun 2014 00:27:48 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of bpodgursky@gmail.com designates 209.85.128.173 as permitted sender)
Received: from [209.85.128.173] (HELO mail-ve0-f173.google.com) (209.85.128.173)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 11 Jun 2014 00:27:43 +0000
Received: by mail-ve0-f173.google.com with SMTP id db11so4034740veb.32
        for <users@maven.apache.org>; Tue, 10 Jun 2014 17:27:22 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=UH78ouTkkbrtsw2s5IRNTVAi7mc4kMjYTDJLz+a0EF0=;
        b=Kjezb5XwcvbLC+CfirFQUUxINCA+XwlZcWErs1x2tJ6XDKG4x3+tdPgCpx5BNuHuuz
         oP6NrJLQecqKQaEApmZLDIBwKpszJJp+M/2IMDw8JkoMFi+UBql5y+nGgqhV5GywqlSl
         dSvlLtLQcwfnjKRIANEbE3uIYBBZvYpO0E1WbAxtUbc8q0LnpbgHc1+mq7uhVpkmIeM1
         FflbqnzdqdDWHD6J3g7QMucp9uGIs984T3FnuGdeo3JWaYmOBt9vgJiw/1HXC88uOe5c
         CFacW8Sv3K/UrY/+n/GjwfaSH52yI+aBZLrdic5N+AbgVKsweEfUC+H1jYy1cfBxasLM
         6nkw==
MIME-Version: 1.0
X-Received: by 10.58.211.229 with SMTP id nf5mr35089763vec.19.1402446442463;
 Tue, 10 Jun 2014 17:27:22 -0700 (PDT)
Received: by 10.58.146.98 with HTTP; Tue, 10 Jun 2014 17:27:22 -0700 (PDT)
Date: Tue, 10 Jun 2014 17:27:22 -0700
Message-ID: <CAC21K-4EhYedVirNOW8Yp+wbrJQzpnrdWD_nGzssQosqP0Fojg@mail.gmail.com>
Subject: Concurrent maven processes using the same repository failing when new
 snapshot version downloaded
From: Ben Podgursky <bpodgursky@gmail.com>
To: users@maven.apache.org
Content-Type: multipart/alternative; boundary=047d7bdc1824050b2104fb84823a
X-Virus-Checked: Checked by ClamAV on apache.org

--047d7bdc1824050b2104fb84823a
Content-Type: text/plain; charset=UTF-8

Hi all,

I'm running into a problem where maven processes using a shared repository
are getting exceptions when a new snapshot dependency is deployed.  Our
setup is:

- We use Jenkins continuous integration builds.  The builds are just
running a simple "mvn clean deploy".
- Our build machines often run builds for two projects simultaneously.
 When running simultaneously, the builds will share a maven respository.

We have (for simplification) three projects A, B, and C.  Each of these is
deployed as a snapshot at the end of a successful build.  Projects B and C
each depend on a snapshot version of of project A.

Intermittently, when projects B and C are running simultaneously on a
machine, the build which started first will begin to fail all tests with
java.lang.NoClassDefFoundError, where the classes not found belong to
project A.  I've verified that the classfiles are present in A's deployed
jar.

I *believe* what is happening is:

1) project B begins building, and starts surefire tests.
2) project A deploys a new snapshot version (possibly from a different
machine)
3) project C begings building.  Because our snapshot update policy is set
to "always", it downloads the new version of "A-1.0-SNAPSHOT.jar", and
replaces the previous version in the local respository
4) the tests for project B start to fail because they are using a reference
to a file which has been deleted

I've looked into what surefire is putting on the classpath, and even though
the repository has the specific version of the snapshot available, (ex
"A-1.0-20140610.213850-369.jar"), it's putting
"analysis_lib-1.0-SNAPSHOT.jar" on the classpath.  I don't understand why
maven would prefer to use the artifact which could get replaced rather than
the semi-permanent artifact (I understand snapshot versions aren't
permanent, but it would at least survive for the duration of the build.)

My questions are:

- does this sequence of events seem plausible, or is there another
explanation to the exceptions I'm seeing?

- is there a way I can force maven to put the timestamped version of
artifacts on the classpath instead of the SNAPSHOT versions?  I understand
I can specify the timestamp in the pom.xml, but that's not what I want--I
just want it to choose the current version when the build starts, and use
that for the duration of the build.  I'm also familiar with mvn
versions:lock-snapshots, but I'd rather avoid it if possible because (1) it
adds build complexity and (2) it doesn't lock versions pulled in
transitively (ex D -> A -> B, if D was a snapshot), since I don't want to
deploy artifacts with locked versions


Thanks for your time,

Ben

--047d7bdc1824050b2104fb84823a--

