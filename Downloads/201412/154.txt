From users-return-137950-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Mon Dec  8 16:15:09 2014
Return-Path: <users-return-137950-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 75C1910A40
	for <apmail-maven-users-archive@www.apache.org>; Mon,  8 Dec 2014 16:15:09 +0000 (UTC)
Received: (qmail 35558 invoked by uid 500); 8 Dec 2014 16:15:07 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 35481 invoked by uid 500); 8 Dec 2014 16:15:06 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 34544 invoked by uid 99); 8 Dec 2014 16:15:05 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 08 Dec 2014 16:15:05 +0000
X-ASF-Spam-Status: No, hits=1.7 required=5.0
	tests=FREEMAIL_ENVFROM_END_DIGIT,HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of enygma2002@gmail.com designates 209.85.192.171 as permitted sender)
Received: from [209.85.192.171] (HELO mail-pd0-f171.google.com) (209.85.192.171)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 08 Dec 2014 16:15:01 +0000
Received: by mail-pd0-f171.google.com with SMTP id y13so5405887pdi.16
        for <users@maven.apache.org>; Mon, 08 Dec 2014 08:13:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :content-type;
        bh=wqIaunDX+eQjxn3neDdwH6FXwIX0bHHI69upJUhFEOA=;
        b=cLaJVRR4/TW00xA5Q9ofOhd9q0jl8VfsLjmvNLyw1MgmARy5UcdidMlnnrNrYLzilT
         KckCxrjAPNTyLha00M1KF77WbdXAiM1Nm3yHCqIhuAiCLKRfdEPwJdHiiGvH+vM6pp6p
         up2549N9sM4MOyEJJo9x7cH548RdiXDUgEwGoEnz/+l8ALCoGxvRAMCxUwKRYK0//b8z
         Ohp4JE3lqhIw6Ejv3TtATq3Axaxezs8Tyq43cuZjf6Jj/fim0k7he5lazZw1Qfy6yk3K
         E5iJEn74uJyFf9KReP53BU6tawZ0cSuZTs91xQNDBMfgpTwiNwzCw5TuFG3HzoVHmI48
         xInw==
X-Received: by 10.70.138.37 with SMTP id qn5mr22695806pdb.118.1418055236015;
 Mon, 08 Dec 2014 08:13:56 -0800 (PST)
MIME-Version: 1.0
Received: by 10.70.3.226 with HTTP; Mon, 8 Dec 2014 08:13:34 -0800 (PST)
In-Reply-To: <CADGDyY+AGJbuxkKWcg49WkgUouvQJ3uKXNJxgkOxj8yMS9JeAQ@mail.gmail.com>
References: <CADGDyYL0yOwJB45_V3KoKUi=6iar8wxJhpck7DuaGYAm1-qNig@mail.gmail.com>
 <etPan.54745870.327b23c6.28a@Slartibartfast.local> <CADGDyY+AGJbuxkKWcg49WkgUouvQJ3uKXNJxgkOxj8yMS9JeAQ@mail.gmail.com>
From: Eduard Moraru <enygma2002@gmail.com>
Date: Mon, 8 Dec 2014 18:13:34 +0200
Message-ID: <CADGDyYKj9qsiPQeYcwT2E5GEjj+rS1vP+qBvYEubaCmVa1K-Fg@mail.gmail.com>
Subject: Re: Using the Maven Indexer
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a1136371c9d5c660509b6b617
X-Virus-Checked: Checked by ClamAV on apache.org

--001a1136371c9d5c660509b6b617
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hi,

I have a new challenge for your maven-indexer expertise :)

What about adding additional information to the local index? I see the
default indexers (min, etc..) produce really minimal information. The
problem is that everybody is using these default indexers and all the
available indexes (maven central, etc) offer very little information that
you can actually use to make the index useful in an application outside of
really basic name, description, group, artifact, etc queries.

For instance, if I would want to add author information (to query by
author) or dependency information (to perform compatibility checks against
an installation/group of installed artifacts) or anything else for the
matter, what would be the recommended approach?

>From what I have currently researched, I see 2 options:

1) Have a custom IndexCreator that uses the updateDocument(ArtifactInfo
artifactInfo, Document document) method to fetch (HTTP GET) get the pom.xml
by using information from the artifactInfo object (repository, groupID,
artifactId, classifier, version, etc.) so that the resulting document
contains the extra information. It seems that IndexCreators are used a lot
more than they are advertised in the descriptions, not only for indexing
new items, but also when converting between ArtifactInfo objects and Lucene
Documents.

1.1) I had initially started going on this pat, but then I realized that
the artifactInfo that I receive in this method does not provide basic
information (i.e. artifactInfo.getRepository() always returns null ;-( ) It
would be awesome if information like context and/or repository would be
added to the artifactInfo object (maybe in
IndexUtils.constructArtifactInfo( Document doc, IndexingContext context )
?), the same way the ArtifactInfo.UINFO and ArtifactInfo.LAST_MODIFIED
fields are handled specially and explicitly added to a new Document that is
passed to the IndexCreators.

2) Handle this separately from maven indexer's work, and do it right after
index/update operations, i.e. let maven-indexer update the local index with
information from the remote index and then start manipulating the
underlying Lucene index by adding information retrieved from the network
(HTTP GET) from the remote repositoy's POM files. In a rough pseudocode,
something like:

indexer.update(repoX);
indexer.getAllIndexedArtifacts().forEach(artifact ->
  var extraData =3D getExtraData(repoX, artifact);
  var indexer.getLuceneIndex().add(artifact, extraData)
);

3) Any other suggestions?

My ultimate goal is (besides basic name/description queries) to be able to
perform compatibility queries on artifacts coming from multiple
repositories, so I need to find a solution to add this missing infrmation
(artifact dependencies, and maybe more).

As previously, your help and suggestions are most welcomed.

Thanks,
Eduard

On Wed, Nov 26, 2014 at 1:22 PM, Eduard Moraru <enygma2002@gmail.com> wrote=
:

>
>
> On Tue, Nov 25, 2014 at 12:22 PM, Tamas Cservenak <tamas@cservenak.net>
> wrote:
>
>> Hi there,
>>
>> 1) yes, indexing context retains the artefact =E2=80=9Corigin=E2=80=9D (=
ie. repo), so you
>> need context per origin. Sadly, the 1 index per context is current
>> limitation of maven indexer, but this problem is known. Created
>> http://jira.codehaus.org/browse/MINDEXER-93
>>
>> 2) Yes, merged context is basically delegating to member contexts. under
>> the hud, it uses Lucene=E2=80=99s MultiReader to actually perform the se=
arch.
>>
>
> I have solved the search problem for now by using the SearchEngine
> component and issuing an IteratorSearchRequest on a list of
> IndexingContexts to get paginated results. Will have to see how that work=
s
> on the long run.
>
> Thanks,
> Eduard
>
>
>> Re ranging, there are already issues (or problem spread across multiple
>> issues), most notably this one
>> http://jira.codehaus.org/browse/MINDEXER-8
>>
>> 3) I think yes. Currently, indexer is being transitioned from Plexus to
>> JSR330, and as you see in examples, it should work with any container
>> supporting it. re =E2=80=9Cmanually wiring=E2=80=9D, in latest releases =
you might be able
>> to do it, but in older ones probably not, as Plexus supported field
>> injection only, and some of those member was not exposed via getter/sett=
er.
>> See
>> http://jira.codehaus.org/browse/MINDEXER-80
>>
>>
>> --
>> Thanks,
>> ~t~
>>
>> On 21 Nov 2014 at 18:08:26, Eduard Moraru (enygma2002@gmail.com) wrote:
>>
>> Hi,
>>
>> I have recently started playing with the maven indexer [1], following th=
e
>> examples [2], and I have some questions (since AFAIS, documentation is
>> practically unexistent on the matter):
>>
>> 1) From what I can understand, you need an IndexingContext for each
>> repository you plan to index. This makes you end up with n lucene indexe=
s,
>> one for each repository. Is there any way that I could have just 1 lucen=
e
>> index, with all my repositories indexed in the same place? If the main
>> purpose is searchig, why scatter the indexed information across n indexe=
s
>> and make the whole process dificult? Maybe I`m missing something.
>>
>> 2) On the same line as the first question, when it comes to searching, i=
t
>> seems that I can use a MergedIndexingContext to perform a search on
>> multiple (all) indexed repositories (IndexingContexts). How does this
>> merge
>> the search results? I assume it takes each lucene index and queries it
>> individually, but this probably means that the lucene scores of these
>> merged results are completely messed up and ureliable, right?
>> Any suggestions on how to properly perform search over multiple indexed
>> repositories?
>>
>> 3) About the Plexus Container: Am I forced to initialize and use one, or
>> can I/should manually instantiate the default implementations and use th=
em
>> instead?
>>
>> I`ll probably come up with more questions along the way, hope someone wi=
ll
>> find the time to guide me on the right path.
>>
>> Thanks,
>> Eduard
>>
>> ----------
>> [1] https://github.com/apache/maven-indexer/
>> [2]
>>
>> https://github.com/apache/maven-indexer/tree/master/indexer-examples/ind=
exer-examples-basic
>>
>
>

--001a1136371c9d5c660509b6b617--

