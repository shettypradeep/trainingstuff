From users-return-138023-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Mon Dec 15 14:59:06 2014
Return-Path: <users-return-138023-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 62C669F99
	for <apmail-maven-users-archive@www.apache.org>; Mon, 15 Dec 2014 14:59:06 +0000 (UTC)
Received: (qmail 39617 invoked by uid 500); 15 Dec 2014 14:59:04 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 39518 invoked by uid 500); 15 Dec 2014 14:59:04 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 39507 invoked by uid 99); 15 Dec 2014 14:59:04 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 15 Dec 2014 14:59:04 +0000
X-ASF-Spam-Status: No, hits=2.2 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_NONE,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: local policy)
Received: from [212.227.17.10] (HELO mout.kundenserver.de) (212.227.17.10)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 15 Dec 2014 14:58:37 +0000
Received: from [192.168.100.71] ([212.94.34.202]) by mrelayeu.kundenserver.de
 (mreue102) with ESMTPSA (Nemesis) id 0M3Sim-1XijEq23W4-00r1CD for
 <users@maven.apache.org>; Mon, 15 Dec 2014 15:58:36 +0100
Message-ID: <548EF71B.4030507@landrus.de>
Date: Mon, 15 Dec 2014 15:58:35 +0100
From: Christian Domsch <mail@landrus.de>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.3.0
MIME-Version: 1.0
To: Maven Users List <users@maven.apache.org>
Subject: Re: Installing only javadocs
References: <1418648803.86231.ezmlm@maven.apache.org>	<548EDE5F.6070707@landrus.de> <CA+nPnMyVKcPG8KZcV-601FPZd395bm2ECb56quXzvZnMYsvRmg@mail.gmail.com>
In-Reply-To: <CA+nPnMyVKcPG8KZcV-601FPZd395bm2ECb56quXzvZnMYsvRmg@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------050405000107030201060109"
X-Provags-ID:  V03:K0:7SEERO7YXbbvKRZ7CvanUA5XWk3CD64/Oc1k9SRXKsrSeFhdl/M
 UCMbG/CslhvVUIL9OcMGJzpwelApVyQcp6h+N3sR1GeYyoowbvqxJzbwGGV3I997vVP0CwP
 z4f4e/b4D4+WNsPY5rWld6NPXITa66qSlFrnjgaLIyqa8BhcXqNMbHZWuumGF6W+5av96Va
 YQT32IKjvCHeJzkv4JVmw==
X-UI-Out-Filterresults: notjunk:1;
X-Virus-Checked: Checked by ClamAV on apache.org

--------------050405000107030201060109
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit

Hi Stephen,

that is actually the way it is setup. With one minor problem, the 
installers need the javadocs from the other modules as well. And we do 
not build them during the normal built because of performance reasons 
(it takes ~15mins to create them).

You are right, the installer modules could be even completly decoupled, 
what we have are submodules that are activated via a profile.

But to built the javadocs I have to go into the original modules again 
and create the javadocs. This so far is working. But in this setup, the 
installer modules have no access to the javadocs, since they onlide 
reside inside the target folders and not the local repository.

Maybe to illustrate:

Main module:
   root/module/A
              /B
              /C
              /D/D1
                /D2

Installer:
   root/installers/instA
                  /instB


What I currently run is mvn deployin the main build, with disabled 
javadoc generation.
For the installers, I runmvn javadoc:jarin the main module directory, 
and then mvn installin the installer directory. But again, javadoc:jar 
does not copy to local repo, so when the installers are run the 
(possibly) reference old javadocs that are still in the local repo, 
instead of using the just generated javadocs.

Hope this clarifies the problem

Thanks,
Christian

On 15.12.2014 15:47, Stephen Connolly wrote:
> Wrong track.
>
> On 15 December 2014 at 13:13, Christian Domsch <mail@landrus.de> wrote:
>> Hi,
>>
>> I have a continuous integration setup where the build is setup in two
>> steps. First all modules are built and deployed. After that a second build
>> is triggered that takes those artifacts and builds installers from that.
>>
> You should have separate modules that transform the artifacts into
> installers for those artifacts.
>
> Those separate moduled can even be in a separate SCM root as you may
> release the first modules multiple times but only build installers from the
> last time.
>
>
>
>> Because of performance reasons and they are only needed for the
>> installers, any javadoc jars are only being built in the second step. Now I
>> want to install these jars into the local repo as well. A call to
>> javadoc:jar only creates those jars, not copy them over to the local repo.
>>
>> I do not want to run mvn install, as that would run the complete build
>> again. Now, I looked at the documentation of maven-javadoc-plugin and the
>> maven-install-plugin but I couldnt find a way to only install the javadocs.
>> (something like mvn javadoc:jar javadoc:install, if such a goal would
>> exist).
>>
>> Is there a way to achieve that or am I on the wrong track?
>>
>> Greetings,
>>
>> Christian
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
>> For additional commands, e-mail: users-help@maven.apache.org
>>
>>


--------------050405000107030201060109--

