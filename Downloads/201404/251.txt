From users-return-136296-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Apr 30 23:32:43 2014
Return-Path: <users-return-136296-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 4435E1089B
	for <apmail-maven-users-archive@www.apache.org>; Wed, 30 Apr 2014 23:32:43 +0000 (UTC)
Received: (qmail 76439 invoked by uid 500); 30 Apr 2014 23:32:38 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 76135 invoked by uid 500); 30 Apr 2014 23:32:38 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 73677 invoked by uid 99); 30 Apr 2014 21:19:36 -0000
X-ASF-Spam-Status: No, hits=-0.7 required=5.0
	tests=RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of mark.c.e@gmail.com designates 74.125.82.50 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:subject
         :content-type:content-transfer-encoding;
        bh=+FMDNUZXCcc08mZ0Ee7717k90DNm7ADn5UYPZxl2xdc=;
        b=wbKa3cUQrbzMKw+Xfnuwsy3N4sd8PwLaxV2QbxG/+DruGyV7yo/emvvOhpOm2h7Cj8
         uglX3xA/yNBjm2Z5Y8IlioUGEolqay9PixL9GqX/dfrrlnCn6HXkmvYTByvrauwZJ3Nt
         R/ED7snmtWtR3ZeajgtBVCSBhQEGpmyWuVrxyVfoOdogtQNiJqkUCVX4BqUW+CGheWs1
         JpNtoorpImkNbTDHoKSaa/mWaNJmUUuWlo0T3psdRp8oGPudQbO7ujrjfQLh7/gf9tnb
         noVe9Hb31BBUgPBFyaPzMc8c+vvSPhT+OcruFo0hh1wmH/7IGFeljfy3kFOSO/NvLNGs
         Jm6A==
X-Received: by 10.194.84.101 with SMTP id x5mr5863041wjy.52.1398892747896;
        Wed, 30 Apr 2014 14:19:07 -0700 (PDT)
Message-ID: <536168BD.8040200@gmail.com>
Date: Wed, 30 Apr 2014 22:18:53 +0100
From: Mark <mark.c.e@gmail.com>
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:24.0) Gecko/20100101 Thunderbird/24.4.0
MIME-Version: 1.0
To: users@maven.apache.org
Subject: Netbeans maven project with invalid POM/classpath problem
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Checked: Checked by ClamAV on apache.org

Hi ,

I am new to Maven and Glassfish (and pretty new to Java and Netbeans!) 
and am struggling to build a JPA based 'injection' project that I want 
to run as an application client (using Glassfish appclient) to inject 
rows from an Oracle db table into a JMS queue.

Specifically the problem is:

When I build the 'injection' project' I get an invalid pom message but 
it builds.

"The POM for com.oracle:ojdbc6:jar:11.2.0 is invalid, transitive 
dependencies (if any) will not be available, enable debug logging for 
more details"

Running it with appclient however it fails as I get the following error:

"org.eclipse.persistence.DatabaseException. Exception description: 
Configuration error message - Class [oracle.jdbc.Oracle driver] not found."

Browsing the local Maven repository using Netbeans I find the following 
  if I right-click on the ojdbc 11.2.0 jar and select 'View Details'

------
org.apache.maven.project.InvalidProjectModelException: 1 problem was 
encountered while building the effective model
[FATAL] Non-parseable POM 
C:\Users\mcedward\.m2\repository\com\oracle\ojdbc6\11.2.0\ojdbc6-11.2.0.pom: 
end tag name </body> must be the same as start tag <meta> from line 142 
(position: TEXT seen ...<!-- End of carousel script -->\n</body>... 
@453:8)  @ line 453, column 8  for project  for project
	at 
org.apache.maven.project.DefaultMavenProjectBuilder.transformError(DefaultMavenProjectBuilder.java:193)
	at 
org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:240)
	at 
org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:251)
	at 
org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:258)
	at 
org.netbeans.modules.maven.repository.ui.ArtifactMultiViewFactory.readMavenProject(ArtifactMultiViewFactory.java:231)
	at 
org.netbeans.modules.maven.repository.ui.ArtifactMultiViewFactory.access$000(ArtifactMultiViewFactory.java:104)
	at 
org.netbeans.modules.maven.repository.ui.ArtifactMultiViewFactory$1.run(ArtifactMultiViewFactory.java:187)
	at org.openide.util.RequestProcessor$Task.run(RequestProcessor.java:1423)
	at 
org.openide.util.RequestProcessor$Processor.run(RequestProcessor.java:2033)

------

It says this could be because :
- I'm offline (but I'm not)
- The repository content is wrong - no reason to suppose it is
- The project or dependences cannot be resolved for the given set of 
repositories - no reason to suppose this either - 'Find Usages' seems to 
give the right answer
- bug in the Maven or Netbeans codebase -mmmm? Hence posting to Netbeans 
and Maven forums


I have successfully compiled and run an early version that just loads 
text to JMS so have got appclient to run successfully. I now want to use 
JPA to read the db. I have a separate Maven 'persistence' project that 
defines the persistence entities and have used this successfuly with 
another 'generation' project that generates the database table content 
in the first place.
When I build the persistence project I get the same 'Invalid POM' 
message but it still works fine when included as a compile-time 
dependency in the 'generation' project.


The persistence project has the following POM:
---------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
     <groupId>com.oracle</groupId>
     <artifactId>cepdemodatagen</artifactId>
     <version>1.0-SNAPSHOT</version>
     <packaging>jar</packaging>
     <dependencies>
         <dependency>
             <groupId>org.eclipse.persistence</groupId>
             <artifactId>javax.persistence</artifactId>
             <version>2.1.0</version>
             <type>jar</type>
         </dependency>
         <dependency>
             <groupId>cepdemo</groupId>
             <artifactId>cepdemopersistence</artifactId>
             <version>1.1-SNAPSHOT</version>
             <type>jar</type>
         </dependency>
         <dependency>
             <groupId>com.oracle</groupId>
             <artifactId>cepdemopersistence</artifactId>
             <version>1.0-SNAPSHOT</version>
             <type>jar</type>
         </dependency>
     </dependencies>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <maven.compiler.source>1.7</maven.compiler.source>
         <maven.compiler.target>1.7</maven.compiler.target>
     </properties>
</project>
-----------------------------
Note: cepdemopersistence-1.1-SNAPSHOT dependency is not used in any code 
- don't know how it got there!

The 'injection' project has the following POM:

------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>

     <groupId>com.oracle.cepdemo</groupId>
     <artifactId>TradeInjector4</artifactId>
     <version>1.0-SNAPSHOT</version>
     <packaging>app-client</packaging>

     <name>TradeInjector4</name>

     <properties>
         <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>

     <dependencies>
         <dependency>
             <groupId>com.oracle.cepdemo</groupId>
             <artifactId>cepdemopersistence</artifactId>
             <version>1.0</version>
         </dependency>
         <dependency>
             <groupId>com.oracle</groupId>
             <artifactId>ojdbc6</artifactId>
             <version>11.2.0</version>
             <scope>runtime</scope>
         </dependency>
         <dependency>
             <groupId>javax</groupId>
             <artifactId>javaee-api</artifactId>
             <version>7.0</version>
             <scope>provided</scope>
         </dependency>
     </dependencies>

     <build>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>3.1</version>
                 <configuration>
                     <source>1.7</source>
                     <target>1.7</target>
                     <compilerArguments>
                         <endorseddirs>${endorsed.dir}</endorseddirs>
                     </compilerArguments>
                 </configuration>
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-acr-plugin</artifactId>
                 <version>1.0</version>
                 <extensions>true</extensions>
                 <configuration>
                     <archive>
                         <manifest>
 
<mainClass>com.oracle.cepdemo.tradeinjector4.Main</mainClass>
                         </manifest>
                     </archive>
                 </configuration>
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-jar-plugin</artifactId>
                 <version>2.4</version>
                 <configuration>
                   <archive>
                     <manifest>
                       <addClasspath>true</addClasspath>
                     </manifest>
                   </archive>
                 </configuration>
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-dependency-plugin</artifactId>
                 <version>2.6</version>
                 <executions>
                     <execution>
                         <phase>validate</phase>
                         <goals>
                             <goal>copy</goal>
                         </goals>
                         <configuration>
 
<outputDirectory>${endorsed.dir}</outputDirectory>
                             <silent>true</silent>
                             <artifactItems>
                                 <artifactItem>
                                     <groupId>javax</groupId>
 
<artifactId>javaee-endorsed-api</artifactId>
                                     <version>7.0</version>
                                     <type>jar</type>
                                 </artifactItem>
                             </artifactItems>
                         </configuration>
                     </execution>
                 </executions>
             </plugin>
         </plugins>
     </build>

</project>

-----------------------------------

The ojdbc jar is also colocated with the injection project jar. It is 
included as a runtime dependency in the persistence project and the 
injection project. I have tried to use the following fragment from the 
above POM to include the driver jar in the Class-path attribute in the 
Manifest file but this doesn't seem to do anything:

<plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-jar-plugin</artifactId>
                     <version>2.4</version>
                     <configuration>
                         <archive>
                             <manifest>
                                 <addClasspath>true</addClasspath>
                             </manifest>
                         </archive>
                     </configuration>
                 </plugin>


I've set the classpath environment variable to include the driver jar 
and I've tried running appclient with the -classpath option but I cannot 
seem to set the appropriate classpath for appclient no matter what I 
try. 2 weeks of misguided hacking in the evenings is enough so  I'm 
hoping someone out there who understands this technology can help (as I 
clearly don't get sufficient understanding from 
tutorials/blogs/manuals/hacking..)

I am using :

Netbeans 8
Glassfish 4
JDK 1.7 (tried with 1.6 too with no difference)
Oracle 11.2.0.1
Oracle driver 'ojdbc6.jar', download from OTN
...  on a Windows 7 64-bit laptop

Thanks in advance for any help

Kind regards
Mark

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


