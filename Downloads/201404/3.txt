From users-return-136241-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Apr 23 04:15:51 2014
Return-Path: <users-return-136241-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 3C6051048F
	for <apmail-maven-users-archive@www.apache.org>; Wed, 23 Apr 2014 04:15:51 +0000 (UTC)
Received: (qmail 56644 invoked by uid 500); 23 Apr 2014 04:15:47 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 55982 invoked by uid 500); 23 Apr 2014 04:15:45 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 55966 invoked by uid 99); 23 Apr 2014 04:15:44 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 23 Apr 2014 04:15:44 +0000
X-ASF-Spam-Status: No, hits=-0.5 required=5.0
	tests=FREEMAIL_ENVFROM_END_DIGIT,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of knarayanan88@gmail.com designates 209.85.223.175 as permitted sender)
Received: from [209.85.223.175] (HELO mail-ie0-f175.google.com) (209.85.223.175)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 23 Apr 2014 04:15:39 +0000
Received: by mail-ie0-f175.google.com with SMTP id to1so417009ieb.34
        for <users@maven.apache.org>; Tue, 22 Apr 2014 21:15:16 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=UeYzPAJJz53nU1mWmcoaVp2NnXkgM2S9wgLKi5ANipc=;
        b=chc5jfakOE6QSgaAo1c5j+KkjLT3AZz9qL4Q72ZDdyhg+Ho4WN4AtubgKbkKp2yf3z
         CGWzeEfCiDxmuQrkH32//f/nlwcYb2x62iyVC35YQcIa4JgNNuNW6tZNSQzx9QfAvrK8
         OhG2F6jikx+sGtTpb/tkb+9u9urx69L76CiSoi1iuQP8JHxvB/QUvOQnIoE4wNwuptJo
         XvpiXBYQsUT4ppe0EE8+t+dTwiwL9NPB9YTtTe1MIkDyZNsa2wDzH2t7HotKGyZujHq4
         7c3JPgT5/a7p2K+o1L+A3yDDTHkOTya0S5sHEm3o3NAtdOazQzFP77neot3pd2nVzHGo
         PP1Q==
MIME-Version: 1.0
X-Received: by 10.42.247.132 with SMTP id mc4mr40568758icb.44.1398226516261;
 Tue, 22 Apr 2014 21:15:16 -0700 (PDT)
Received: by 10.50.122.37 with HTTP; Tue, 22 Apr 2014 21:15:16 -0700 (PDT)
In-Reply-To: <CAKDUN1uqiMUQZK3v3g7NqcrvbYVi5QOL==YsU-FvN5aL+mVedQ@mail.gmail.com>
References: <CAAqB__v0TwN+kuL-QYeVQczhX3t+mmd58StYJMtaytFx0ZjnQA@mail.gmail.com>
	<CA+nPnMzLSP8AvqNwdjdChgkmF7spcpYzuovQqYQSm5r7aj8wmQ@mail.gmail.com>
	<CAAqB__sJZ9WU9vY0pqQqUvBZZJwwut2+B-UxoGbyp2M-a98Obg@mail.gmail.com>
	<CAKDUN1uqiMUQZK3v3g7NqcrvbYVi5QOL==YsU-FvN5aL+mVedQ@mail.gmail.com>
Date: Tue, 22 Apr 2014 21:15:16 -0700
Message-ID: <CAAqB__t3qHj7HjA-GumSJPS-XGKDO2rD4Pyc9FYOfsdPtbpxbQ@mail.gmail.com>
Subject: Re: Generating war and Jar from same codebase
From: Narayanan K <knarayanan88@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: text/plain; charset=UTF-8
X-Virus-Checked: Checked by ClamAV on apache.org

Hi Anders

The codebase is the same. So having 2 separate directories (for
modules) and pom in each of them is not required right ?

I can have <modules> in parent pom to specify the 2 child poms that
are present in the same project level. Tried below and seems it is
working.

parent pom will have :

<modules>
  <module>pom-war.xml</module>
  <module>pom-jar.xml</module>
<modules>

In both child poms,

<parent>
<relativePath>./pom-parent.xml</relativePath>
</parent>

Currently including the jar artifact dependency in war project cannot
be done due to some restrictions in our development.

Narayanan

On Tue, Apr 22, 2014 at 11:37 AM, Anders Hammar <anders@hammar.net> wrote:
>> My new maven project structure will be :
>>
>> .
>>  | -- pom.xml (parent pom)
>>  | -- pom-war.xml (inherits from parent, generates a war)
>>  | -- pom-jar.xml (inherits from parent, generates a jar)
>>
>> There are no modules in the project. All poms are going to be in the
>> root path of the project.
>>
>
> Wrong!
> You should create two modules; one for the jar project and one for the war
> project. Follow the Maven standards and you can use any of the many
> examples of this on the Internet.
> I believe we haven't pushed the mantra for some time now, so here it comes:
> Don't fight Maven!
>
> /Anders
>
>
>>
>> 1. Any examples on how to write the parent pom referencing the same
>> codebase for the child poms.
>> Will there be a <module> tag for parent pom.  I understand that the
>> packaging for parent pom will be "pom".
>>
>> 2. The child poms will have <relativePath> in <parent> tag as
>> ./pom.xml. Please correct me if this is wrong.
>>
>> Thanks
>> Narayanan
>>
>>
>>
>>
>>
>> Narayanan
>>
>> On Tue, Apr 22, 2014 at 12:38 AM, Stephen Connolly
>> <stephen.alan.connolly@gmail.com> wrote:
>> > On 22 April 2014 01:18, Narayanan K <knarayanan88@gmail.com> wrote:
>> >
>> >> Hi
>> >>
>> >> We have a default pom file with packaging "war" for our codebase.
>> >>
>> >> From the same code base we also want to generate a normal jar and a
>> >> fat jar with dependencies.
>> >>
>> >> Currently solution that has been implemented is another pom-jar.xml
>> >> file that has the packaging as jar and maven-assembly-plugin to
>> >> generate the jar with dependencies. We use mvn install -f pom-jar.xml.
>> >>
>> >> But we are in a situation where if any new dependency is added to
>> >> pom.xml, we need to add to pom-jar.xml as well as it is the same
>> >> codebase.
>> >>
>> >> To avoid this we thought of couple of solutions -
>> >>
>> >> 1. Add maven-jar-plugin and maven-assembly-plugin to the default pom
>> >> with packaging war - so it generates a war file, a normal jar file and
>> >> fat jar out of the same pom. So we can do away with the pom-jar.xml.
>> >>
>> >> Not sure if this is a good solution. We tried this, but this is
>> >> working well only in maven 3.0.4. The assembly plugin is not working
>> >> well with Maven 2 (which is in our build environment) while generating
>> >> the fat jar.
>> >>
>> >> 2. Have a parent pom and put all the dependencies and plugins in that
>> >> and have 2 child poms in the same codebase with different names
>> >> inherit from parent pom, one that has packaging of war that generates
>> >> war file and the other child pom has packaging jar with maven assembly
>> >> plugin to generate both normal and fat jar. And all new dependencies
>> >> need to be added only to parent pom.
>> >>
>> >> This solution will make us have 3 pom files in codebase, doesnt look
>> >> very elegant,
>> >
>> >
>> > actually depends on your point of view. To me this is the more elegant
>> > solution as you clearly see the relationship between inputs (pom.xml) and
>> > outputs (artifacts, e.g. jars wars, etc)
>> >
>> >
>> >> but will solve our dependency management issues between
>> >> the 2 packaging.
>> >>
>> >>
>> >> Are these good solutions? Is there any other good solution available
>> >> for this scenario ?
>> >>
>> >>
>> >> Regards
>> >> Narayanan
>> >>
>> >> ---------------------------------------------------------------------
>> >> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
>> >> For additional commands, e-mail: users-help@maven.apache.org
>> >>
>> >>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
>> For additional commands, e-mail: users-help@maven.apache.org
>>
>>

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


