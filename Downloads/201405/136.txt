From users-return-136474-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Sat May 31 05:11:43 2014
Return-Path: <users-return-136474-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 30010105E6
	for <apmail-maven-users-archive@www.apache.org>; Sat, 31 May 2014 05:11:43 +0000 (UTC)
Received: (qmail 53888 invoked by uid 500); 31 May 2014 02:21:41 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 53809 invoked by uid 500); 31 May 2014 02:21:41 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 53795 invoked by uid 99); 31 May 2014 02:21:41 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sat, 31 May 2014 02:21:41 +0000
X-ASF-Spam-Status: No, hits=2.2 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_NONE,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of paulus.benedictus@gmail.com designates 209.85.192.50 as permitted sender)
Received: from [209.85.192.50] (HELO mail-qg0-f50.google.com) (209.85.192.50)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sat, 31 May 2014 02:21:38 +0000
Received: by mail-qg0-f50.google.com with SMTP id z60so7504093qgd.23
        for <users@maven.apache.org>; Fri, 30 May 2014 19:21:14 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date:message-id:subject
         :from:to:content-type;
        bh=hY2nI6QM4JoHZx0mhQ9eMbG2N9ArYkWonSLerImAYPI=;
        b=kcc3cc7ZjOsJpgl5+ADZICTnK3+0osDUXttGp55ieHPxmBoWd/uN/eiy0GuNnSu0fk
         BWBBySIApDBFwE1zGRAyvbO3aegyrO1YwK8PotQDJyOxrOI9Ju0nXUG9V3+k4AiKJocH
         wC0u/wJIFtZRMmfAvRPlhVrgBhAdp59RX95OvqASjOpKkPhrCAXo9C4AgkuYmWNWesrT
         KU0RevhJLujyFNG3IGz7988z9Fg2auCJ1hUu54m3ZggWGaOG2c+0Jfyda3AT3qisuv1s
         U8dWYmYVIZtqvAzENLZeWatsUbzhG73wEegWnKCh+UPngyM0/0R6R3110S7/ISYzNTTD
         EJdw==
MIME-Version: 1.0
X-Received: by 10.224.38.204 with SMTP id c12mr27352093qae.1.1401502874400;
 Fri, 30 May 2014 19:21:14 -0700 (PDT)
Sender: paulus.benedictus@gmail.com
Received: by 10.96.21.228 with HTTP; Fri, 30 May 2014 19:21:14 -0700 (PDT)
Received: by 10.96.21.228 with HTTP; Fri, 30 May 2014 19:21:14 -0700 (PDT)
In-Reply-To: <685929049.105979.1401485755492.JavaMail.vpopmail@webmail.networksolutionsemail.com>
References: <003e01cf7c47$b0a2b850$11e828f0$@purelandsupply.com>
	<CADN69y=NbWwx0H6sB6R4r8aWvK2afGNWzsXXm=OVyRpdsDBqFA@mail.gmail.com>
	<685929049.105979.1401485755492.JavaMail.vpopmail@webmail.networksolutionsemail.com>
Date: Fri, 30 May 2014 21:21:14 -0500
X-Google-Sender-Auth: hkX6TvaL0_JY-SbNK4MOw07tO0k
Message-ID: <CABLGb9xgsyGuEPfdoQ_snky1iGd=q5xX+vWgcHcDkKzODKe-oQ@mail.gmail.com>
Subject: Re: Unmanaged dependency question
From: Paul Benedict <pbenedict@apache.org>
To: Matt Whiteman <mwhiteman@purelandsupply.com>, Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a1134a5e0fafd6304faa8d06c
X-Virus-Checked: Checked by ClamAV on apache.org

--001a1134a5e0fafd6304faa8d06c
Content-Type: text/plain; charset=UTF-8

I understand but you can't achieve this using a project to represent a
pre-existing jar. Your attempt won't work. The "install-file" command is
the correct solution; that is how you get it into your local repo without
downloading it from a remote repo.
On May 30, 2014 4:36 PM, "Matt Whiteman" <mwhiteman@purelandsupply.com>
wrote:

> Hi Curtis,
>
> I'll take a look at that, thanks! Ideally, I'll eventually be able to have
> an
> internal Maven repository
> so that I can do everything right. What I had been trying to do in the
> meantime
> is having it set up
> so that when we set up a new development station, the user can simply
> clone the
> Github repo that
> has these dependency projects and just do 'mvn install' on each one, then
> build
> or develop the
> standalone app(s). Kinda  crude I know, but we're basically just starting a
> software development
> department, so have to work  with what's available in the short-term. If it
> doesn't work, I can just
> keep a batch script with the jar  that runs the mvn:install I suppose.
>
> Yup Paul, that's exactly what was happening. The jar file deployed into a
> local
> repo within the
> project directory, and put a reference pom file up in the .m2 directory.
> But as
> soon as I
> ran 'mvn install', it built an empty jar file and put that up in the .m2
> instead. I just wanted to try to
> have it in a separate project so that from the user's perspective, it
> would be
> as close as possible
> to what the process would be  if we had an actual internal maven repo.
>
> Thanks for the suggestions everyone!
>
> Matt
>
> On May 30, 2014 at 4:49 PM Curtis Rueden <ctrueden@wisc.edu> wrote:
> > Hi Matt,
> >
> > Have you seen this article?
> >
> http://developer-blog.cloudbees.com/2013/03/playing-trade-offs-with-maven.html
> >
> > If you cannot deploy the Microsoft JARs to your own internal Maven
> > repository, then you could try the non-maven-jar-plugin approach. It is
> > strongly recommended over the "basedir repository hack" approach that you
> > are using (presumably from
> > https://devcenter.heroku.com/articles/local-maven-dependencies).
> >
> > Regards,
> > Curtis
> >
> >
> > On Fri, May 30, 2014 at 3:42 PM, Matt Whiteman <
> mwhiteman@purelandsupply.com
> > > wrote:
> >
> > > Hi,
> > >
> > >
> > >
> > > This has probably been answered before, but I haven't been able to
> find the
> > > answer and I'm hoping someone knows.
> > >
> > >
> > >
> > > I'm writing several apps that talk to a Microsoft SQL database, so I'm
> > > using
> > > the Hibernate dependency. Since Microsoft doesn't make the sqljdbc4 jar
> > > available on Maven, I've downloaded it, and I'm trying to make it an
> > > unmanaged dependency in its own standalone project so that I can simply
> > > reference it in other projects' pom files without having to deploy the
> jar
> > > to each one individually.
> > >
> > >
> > >
> > > I've followed the instructions for deploying an unmanaged dependency.
> As I
> > > am the only developer at my company (at this time), I do not have a
> > > separate
> > > Maven server setup. I was hoping to simply deploy the dependency and
> then
> > > run 'maven install' so that it copies everything needed into my .m2
> folder.
> > > This is my directory setup:
> > >
> > >
> > >
> > > (This is the project directory for the sqljdbc4 unmanaged dependency)
> > >
> > > C:\dev\Github-repos\addons\sqljdbc4
> > >
> > > +- pom.xml
> > >
> > > +-src
> > >
> > > +-repo
> > >
> > >
> > >
> > > I followed the instructions to use mvn deploy on the local sqljdbc4.jar
> > > file. I am using an artifactId of sqljdbc4, version 4.0, groupId of
> > > com.microsoft.sqlserver. After deployment, the repo directory does
> appear
> > > to
> > > be correctly populated:
> > >
> > >
> > >
> > > C:\dev\Github-repos\addons\sqljdbc4
> > >
> > > +- pom.xml
> > >
> > > +-src
> > >
> > > +-repo
> > >
> > > +-com
> > >
> > > +-microsoft
> > >
> > > +-sqlserver
> > >
> > > +-sqljdbc4
> > >
> > > +-maven-metadata
> > >
> > > +-4.0
> > >
> > > +-sqljdbc4-4.0.jar
> > >
> > > +-sqljdbc4-4.0.pom
> > >
> > >
> > >
> > > Next, following the instructions, I go back into the pom.xml file and
> add
> > > the repository tag, so my pom.xml for this now looks like:
> > >
> > >
> > >
> > > <project xmlns="http://maven.apache.org/POM/4.0.0"
> > > xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
> > > xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
> > > http://maven.apache.org/xsd/maven-4.0.0.xsd
> > > <
> > >
> http://maven.apache.org/POM/4.0.0%20http:/maven.apache.org/xsd/maven-4.0.0
> > > .
> > > xsd> ">
> > >
> > > <modelVersion>4.0.0</modelVersion>
> > >
> > > <groupId>com.microsoft.sqlserver</groupId>
> > >
> > > <artifactId>sqljdbc4</artifactId>
> > >
> > > <version>4.0</version>
> > >
> > >
> > >
> > > <repositories>
> > >
> > > <!--other repositories if any-->
> > >
> > > <repository>
> > >
> > > <id>project.local</id>
> > >
> > > <name>project</name>
> > >
> > > <url>file:${project.basedir}/repo</url>
> > >
> > > </repository>
> > >
> > > </repositories>
> > >
> > > </project>
> > >
> > >
> > >
> > >
> > >
> > > Now, here is the problem. Since I want to use this as a dependency in
> other
> > > projects, I am trying to run 'maven install' so that it will push
> > > everything
> > > into my .m2 directory. The maven build is a success. However, the
> resulting
> > > sqljdbc4.jar file in the target directory and up in the m2 directory is
> > > only
> > > 2kb (whereas the original jar file is 571kb, none of the content made
> it
> > > in). As a result, projects that use this as a dependency build, but
> then
> > > throw a ClassNotFoundException at runtime, because the classes aren't
> > > there.
> > >
> > >
> > >
> > > I am building a separate project that uses this as a dependency:
> > >
> > >
> > >
> > > C:\dev\Github-repos\applications\myapp
> > >
> > >
> > >
> > > The pom.xml for this project uses the dependency correctly:
> > >
> > > <dependency>
> > >
> > > <groupId>com.microsoft.sqlserver</groupId>
> > >
> > > <artifactId>sqljdbc4</artifactId>
> > >
> > > <version>4.0</version>
> > >
> > > </dependency>
> > >
> > >
> > >
> > > I'm even using the maven assembly plugin to ensure a jar is built with
> all
> > > dependencies packaged in:
> > >
> > >
> > >
> > > <plugin>
> > >
> > >
> > > <artifactId>maven-assembly-plugin</artifactId>
> > >
> > > <configuration>
> > >
> > > <descriptorRefs>
> > >
> > >
> > > <descriptorRef>jar-with-dependencies</descriptorRef>
> > >
> > > </descriptorRefs>
> > >
> > > <archive>
> > >
> > > <manifest>
> > >
> > > <addClasspath>true</addClasspath>
> > >
> > >
> > > <mainClass>productfeeds.main.ProductFeedDriver</mainClass>
> > >
> > > </manifest>
> > >
> > > </archive>
> > >
> > > </configuration>
> > >
> > > <executions>
> > >
> > > <execution>
> > >
> > > <phase>package</phase>
> > >
> > > <goals>
> > >
> > > <goal>single</goal>
> > >
> > > </goals>
> > >
> > > </execution>
> > >
> > > </executions>
> > >
> > > </plugin>
> > >
> > >
> > >
> > >
> > >
> > > Any ideas what I'm doing wrong? I'm sure it's something really simple
> I've
> > > overlooked. If I don't make this a standalone dependency, and simply
> use
> > > 'mvn install:install-file -Dfile=sqljdbc4.jar
> > > -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=4.0
> > > -Dpackaging=jar ', then everything works fine.
> > >
> > >
> > >
> > > Thanks,
> > >
> > >
> > >
> > > Matt
> > >
> > >
> > >
> > >

--001a1134a5e0fafd6304faa8d06c--

