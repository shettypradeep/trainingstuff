From users-return-136821-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Tue Jul 22 05:32:38 2014
Return-Path: <users-return-136821-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id B34A8113B0
	for <apmail-maven-users-archive@www.apache.org>; Tue, 22 Jul 2014 05:32:38 +0000 (UTC)
Received: (qmail 41409 invoked by uid 500); 22 Jul 2014 05:32:37 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 41342 invoked by uid 500); 22 Jul 2014 05:32:36 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 41331 invoked by uid 99); 22 Jul 2014 05:32:36 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 22 Jul 2014 05:32:36 +0000
X-ASF-Spam-Status: No, hits=2.2 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_NEUTRAL
X-Spam-Check-By: apache.org
Received-SPF: neutral (athena.apache.org: local policy)
Received: from [209.85.212.173] (HELO mail-wi0-f173.google.com) (209.85.212.173)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 22 Jul 2014 05:32:31 +0000
Received: by mail-wi0-f173.google.com with SMTP id f8so5226026wiw.0
        for <users@maven.apache.org>; Mon, 21 Jul 2014 22:32:09 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:content-type;
        bh=S3DShn9MEy0xuEKOKMXEQ68H0WXkzVpXlTqY1hPQfSY=;
        b=hUesC4bQNtBXsvJshP3TKZW3jtmf0L9NjRNh+giB4THSZM7ITFduR3ntfHPoiJyJLo
         0Cu4K7hIHwy911b8M5f7uCNTxYCev8URtUHUMmlTmtGF0Ln090Pgjd/r4dI0lK1fKaJD
         QwJLu4rJTkd8nnRetgQKIUdiAbMvZRbS0Tidn1Py/H2S0MK26qPPjLo2olx0dSiafmlT
         qryEFgrHUDIMBt7iqp6MvX8TUdpJj7WUCyuduquqlwjocOMBFVRlA3xOqONoWVO0Fqlw
         sHk1veeu4jbOC9HXFQuiHi/i2yeau4T38zg7RbnIy+amgtBXeT8FTWNzSsAVQ5cF1ehm
         OHyw==
X-Gm-Message-State: ALoCoQnJPzg4Q3uoXoTqT1cfSfOlwmm5imz2WLiEEuTlgCWmOPFoLpXJtJx2Jj1j6BQxrnFpDlLK
MIME-Version: 1.0
X-Received: by 10.180.212.77 with SMTP id ni13mr3025377wic.42.1406007129854;
 Mon, 21 Jul 2014 22:32:09 -0700 (PDT)
Received: by 10.216.36.5 with HTTP; Mon, 21 Jul 2014 22:32:09 -0700 (PDT)
X-Originating-IP: [49.187.185.214]
In-Reply-To: <BLU172-W40C66356CCF5989329FB7BAEF00@phx.gbl>
References: <CAA8BW8HFWKNmv_ZTE9wuYQMDJ_FxUzhkXAnW_g3wrVFjovj=cA@mail.gmail.com>
	<53CD80A3.6040302@gmx.de>
	<CAA8BW8FDv2vZhEg5OSOFkyWuRvUAt_Z_tYx7iV80MuQLEx2fcw@mail.gmail.com>
	<CAEBcyzq7aznBgKfVH6DzyzWnVmSwTs3zpfrsOZY1xTUnfqaF6g@mail.gmail.com>
	<BLU172-W40C66356CCF5989329FB7BAEF00@phx.gbl>
Date: Tue, 22 Jul 2014 15:32:09 +1000
Message-ID: <CAEBcyzpv85QdvChGKJXDkq1i8dQ3coF_hJuibOYkxfaGwcUvpA@mail.gmail.com>
Subject: Re: maven-dependency-plugin unpacking aar format?
From: William Ferguson <william.ferguson@xandar.com.au>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a11c23e5a86db1404fec18b33
X-Virus-Checked: Checked by ClamAV on apache.org

--001a11c23e5a86db1404fec18b33
Content-Type: text/plain; charset=UTF-8

So an Android library is packaging WSDL inside itself and is expecting you
to use it at build time?


On Tue, Jul 22, 2014 at 8:53 AM, Martin Gainty <mgainty@hotmail.com> wrote:

> Here is an aar straight from Axis version example:
>
> //layout of version.aar:
>
>    created: META-INF/
>   inflated: META-INF/MANIFEST.MF
>    created: sample/
>    created: sample/axisversion/
>   inflated: sample/axisversion/Version.class
>   inflated: META-INF/services.xml
>
>
> //org.apache.axis2.deployment.DeploymentEngine axis code used to
> populateService with .aar contents:
>
>     protected ArrayList populateService(AxisServiceGroup serviceGroup,
>                                         URL servicesURL,
>                                         String serviceName) throws
> DeploymentException {
>         try {
>             serviceGroup.setServiceGroupName(serviceName);
>             ClassLoader serviceClassLoader = Utils.createClassLoader(
>                     new URL[]{servicesURL},
>                     axisConfig.getServiceClassLoader(),
>                     true,
>                     (File)
> axisConfig.getParameterValue(Constants.Configuration.ARTIFACTS_TEMP_DIR),
>                     axisConfig.isChildFirstClassLoading());
>             String metainf = "meta-inf";
>             serviceGroup.setServiceGroupClassLoader(serviceClassLoader);
>             //processing wsdl.list
>             InputStream wsdlfilesStream =
>
> serviceClassLoader.getResourceAsStream("meta-inf/wsdl.list");
>             if (wsdlfilesStream == null) {
>                 wsdlfilesStream =
> serviceClassLoader.getResourceAsStream("META-INF/wsdl.list");
>                 if (wsdlfilesStream != null) {
>                     metainf = "META-INF";
>                 }
>             }
>             HashMap servicesMap = new HashMap();
>             if (wsdlfilesStream != null) {
>                 ArchiveReader reader = new ArchiveReader();
>                 BufferedReader input = new BufferedReader(new
> InputStreamReader(wsdlfilesStream));
>                 String line;
>                 while ((line = input.readLine()) != null) {
>                     line = line.trim();
>                     if (line.length() > 0 && line.charAt(0) != '#') {
>                         line = metainf + "/" + line;
>                         try {
>                             List services = reader.getAxisServiceFromWsdl(
>
> serviceClassLoader.getResourceAsStream(line),
>                                     serviceClassLoader, line);
>                             if (services != null) {
>                                 for (Object service : services) {
>                                     AxisService axisService =
> (AxisService) service;
>                                     servicesMap.put(axisService.getName(),
> axisService);
>                                 }
>                             }
>
>                         } catch (Exception e) {
>                             throw new DeploymentException(e);
>                         }
>                     }
>                 }
>             }
>             InputStream servicexmlStream =
>
> serviceClassLoader.getResourceAsStream("META-INF/services.xml");
>             if (servicexmlStream == null) {
>                 servicexmlStream =
> serviceClassLoader.getResourceAsStream("meta-inf/services.xml");
>             } else {
>                 metainf = "META-INF";
>             }
>             if (servicexmlStream == null) {
>                 throw new DeploymentException(
>
> Messages.getMessage(DeploymentErrorMsgs.SERVICE_XML_NOT_FOUND,
>                                 servicesURL.toString()));
>             }
>             DescriptionBuilder builder = new
> DescriptionBuilder(servicexmlStream, configContext);
>             OMElement rootElement = builder.buildOM();
>             String elementName = rootElement.getLocalName();
>
>             if (TAG_SERVICE.equals(elementName)) {
>                 AxisService axisService = null;
>                 String wsdlLocation = "META-INF/service.wsdl";
>                 InputStream wsdlStream =
>
> serviceClassLoader.getResourceAsStream(wsdlLocation);
>                 URL wsdlURL = serviceClassLoader.getResource(metainf +
> "/service.wsdl");
>                 if (wsdlStream == null) {
>                     wsdlLocation = "META-INF/" + serviceName + ".wsdl";
>                     wsdlStream = serviceClassLoader
>                             .getResourceAsStream(wsdlLocation);
>                     wsdlURL = serviceClassLoader.getResource(wsdlLocation);
>                 }
>                 if (wsdlStream != null) {
>                     WSDL11ToAxisServiceBuilder wsdl2AxisServiceBuilder =
>                             new WSDL11ToAxisServiceBuilder(wsdlStream,
> null, null);
>                     File file = Utils.toFile(servicesURL);
>                     if (file != null && file.exists()) {
>                         wsdl2AxisServiceBuilder.setCustomWSDLResolver(
>                                 new AARBasedWSDLLocator(wsdlLocation,
> file, wsdlStream));
>                         wsdl2AxisServiceBuilder.setCustomResolver(
>                                 new AARFileBasedURIResolver(file));
>                     }
>                     if (wsdlURL != null) {
>
> wsdl2AxisServiceBuilder.setDocumentBaseUri(wsdlURL.toString());
>                     }
>                     axisService =
> wsdl2AxisServiceBuilder.populateService();
>                     axisService.setWsdlFound(true);
>                     axisService.setCustomWsdl(true);
>                     axisService.setName(serviceName);
>                 }
>                 if (axisService == null) {
>                     axisService = new AxisService(serviceName);
>                 }
>
>                 axisService.setParent(serviceGroup);
>                 axisService.setClassLoader(serviceClassLoader);
>
>                 ServiceBuilder serviceBuilder = new
> ServiceBuilder(configContext, axisService);
>                 AxisService service =
> serviceBuilder.populateService(rootElement);
>
>                 ArrayList serviceList = new ArrayList();
>                 serviceList.add(service);
>                 return serviceList;
>             } else if (TAG_SERVICE_GROUP.equals(elementName)) {
>                 ServiceGroupBuilder groupBuilder = new
> ServiceGroupBuilder(rootElement, servicesMap,
>                         configContext);
>                 ArrayList servicList =
> groupBuilder.populateServiceGroup(serviceGroup);
>                 Iterator serviceIterator = servicList.iterator();
>                 while (serviceIterator.hasNext()) {
>                     AxisService axisService = (AxisService)
> serviceIterator.next();
>                     String wsdlLocation = "META-INF/service.wsdl";
>                     InputStream wsdlStream =
>
> serviceClassLoader.getResourceAsStream(wsdlLocation);
>                     URL wsdlURL =
> serviceClassLoader.getResource(wsdlLocation);
>                     if (wsdlStream == null) {
>                         wsdlLocation = "META-INF/" + serviceName + ".wsdl";
>                         wsdlStream = serviceClassLoader
>                                 .getResourceAsStream(wsdlLocation);
>                         wsdlURL =
>
> serviceClassLoader.getResource(wsdlLocation);
>                     }
>                     if (wsdlStream != null) {
>                         WSDL11ToAxisServiceBuilder wsdl2AxisServiceBuilder
> =
>                                 new WSDL11ToAxisServiceBuilder(wsdlStream,
> axisService);
>                         File file = Utils.toFile(servicesURL);
>                         if (file != null && file.exists()) {
>                             wsdl2AxisServiceBuilder.setCustomWSDLResolver(
>                                     new AARBasedWSDLLocator(wsdlLocation,
> file, wsdlStream));
>                             wsdl2AxisServiceBuilder.setCustomResolver(
>                                     new AARFileBasedURIResolver(file));
>                         }
>                         if (wsdlURL != null) {
>
> wsdl2AxisServiceBuilder.setDocumentBaseUri(wsdlURL.toString());
>                         }
>                         axisService =
> wsdl2AxisServiceBuilder.populateService();
>                         axisService.setWsdlFound(true);
>                         axisService.setCustomWsdl(true);
>                         // Set the default message receiver for the
> operations that were
>                         // not listed in the services.xml
>                         Iterator operations = axisService.getOperations();
>                         while (operations.hasNext()) {
>                             AxisOperation operation = (AxisOperation)
> operations.next();
>                             if (operation.getMessageReceiver() == null) {
>
> operation.setMessageReceiver(loadDefaultMessageReceiver(
>
> operation.getMessageExchangePattern(), axisService));
>                             }
>                         }
>                     }
>                 }
>                 return servicList;
>             }
>         } catch (IOException e) {
>             throw new DeploymentException(e);
>         } catch (XMLStreamException e) {
>             throw new DeploymentException(e);
>         }
>         return null;
>     }
>
> does this answer your question?
> Martin
> ______________
>
>
> > Date: Tue, 22 Jul 2014 07:56:55 +1000
> > Subject: Re: maven-dependency-plugin unpacking aar format?
> > From: william.ferguson@xandar.com.au
> > To: users@maven.apache.org
> >
> > David, what the use case for unpacking the AAR?
> >
> >
> > William
> >
> >
> > On Tue, Jul 22, 2014 at 7:27 AM, David Hoffer <dhoffer6@gmail.com>
> wrote:
> >
> > > Here is a simplified project showing my use-case, I hope this helps.
>  Note
> > > I'm using unpack-dependencies as the aar is a module in the same
> project;
> > > however I assume the same problem exists with unpack, if that's the
> case
> > > that would make the test project even simpler.
> > >
> > > <?xml version="1.0" encoding="UTF-8"?>
> > >
> > > <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
> > > http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
> > > http://maven.apache.org/POM/4.0.0
> > > http://maven.apache.org/xsd/maven-4.0.0.xsd">
> > >
> > >     <modelVersion>4.0.0</modelVersion>
> > >
> > >     <groupId>com.company.project</groupId>
> > >     <artifactId>service</artifactId>
> > >     <version>1.0-SNAPSHOT</version>
> > >
> > >     <packaging>pom</packaging>
> > >
> > >     <dependencies>
> > >         <!--note: maven-dependency-plug fails reporting that aar is not
> > > supported-->
> > >         <dependency>
> > >             <groupId>com.company.project</groupId>
> > >             <artifactId>axis-service</artifactId>
> > >             <type>aar</type>
> > >             <version>1.0-SNAPSHOT</version>
> > >         </dependency>
> > >         <!--note: I assume it will have the same problem unpacking a
> public
> > > artifact such as this-->
> > >         <dependency>
> > >             <groupId>com.helpshift</groupId>
> > >             <artifactId>android-aar</artifactId>
> > >             <version>3.4.2</version>
> > >             <type>aar</type>
> > >         </dependency>
> > >     </dependencies>
> > >
> > >     <build>
> > >         <plugins>
> > >             <plugin>
> > >                 <groupId>org.apache.maven.plugins</groupId>
> > >                 <artifactId>maven-dependency-plugin</artifactId>
> > >                 <executions>
> > >                     <execution>
> > >                         <id>unpack-axis-service</id>
> > >                         <phase>generate-resources</phase>
> > >                         <goals>
> > >                             <goal>unpack-dependencies</goal>
> > >                         </goals>
> > >                         <configuration>
> > >
> > > <includeArtifactIds>axis-service</includeArtifactIds>
> > >
> > >
> > >
> <outputDirectory>${project.build.directory}/generated-resources/axis</outputDirectory>
> > >                             <overWriteReleases>true</overWriteReleases>
> > >
> <overWriteSnapshots>true</overWriteSnapshots>
> > >
> > > <includes>META-INF/*.wsdl,META-INF/schema/**/*.xsd</includes>
> > >                         </configuration>
> > >                     </execution>
> > >                 </executions>
> > >             </plugin>
> > >         </plugins>
> > >     </build>
> > >
> > > </project>
> > >
> > >
> > >
> > > On Mon, Jul 21, 2014 at 3:05 PM, Karl Heinz Marbaise <
> khmarbaise@gmx.de>
> > > wrote:
> > >
> > > > HI David,
> > > >
> > > >
> > > >
> > > > > I'm getting the following error trying to unpack some files from an
> > > aar.
> > > >
> > > >>   Is this not supported?  Is there any way to do this?
> > > >>
> > > >> Failed to execute goal
> > > >>
> org.apache.maven.plugins:maven-dependency-plugin:2.8:unpack-dependencies
> > > >> (unpack-service) on project service: Unknown archiver type: No such
> > > >> archiver: 'aar'. -> [Help 1]
> > > >>
> > > >
> > > > Could you please prepare a example project which reproduces the
> > > > problem..so i can create a JIRA issue for this...
> > > >
> > > > Kind regards
> > > > Karl-Heinz Marbaise
> > > >
> > > > ---------------------------------------------------------------------
> > > > To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> > > > For additional commands, e-mail: users-help@maven.apache.org
> > > >
> > > >
> > >
>
>

--001a11c23e5a86db1404fec18b33--

