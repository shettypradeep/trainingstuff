From users-return-136806-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Jul 18 20:34:06 2014
Return-Path: <users-return-136806-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 4E4CD111E0
	for <apmail-maven-users-archive@www.apache.org>; Fri, 18 Jul 2014 20:34:06 +0000 (UTC)
Received: (qmail 97302 invoked by uid 500); 18 Jul 2014 20:34:04 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 97225 invoked by uid 500); 18 Jul 2014 20:34:04 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 97212 invoked by uid 99); 18 Jul 2014 20:34:04 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 18 Jul 2014 20:34:04 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=RCVD_IN_DNSWL_NONE,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of khmarbaise@gmx.de designates 212.227.17.21 as permitted sender)
Received: from [212.227.17.21] (HELO mout.gmx.net) (212.227.17.21)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 18 Jul 2014 20:33:59 +0000
Received: from Karl-Heinzs-MacBook-Pro.local ([91.35.3.69]) by mail.gmx.com
 (mrgmx101) with ESMTPSA (Nemesis) id 0LoaCE-1WbgFv0wRe-00gVwa for
 <users@maven.apache.org>; Fri, 18 Jul 2014 22:33:38 +0200
Message-ID: <53C984A1.3050100@gmx.de>
Date: Fri, 18 Jul 2014 22:33:37 +0200
From: Karl Heinz Marbaise <khmarbaise@gmx.de>
Reply-To: info@soebes.de
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Thunderbird/24.6.0
MIME-Version: 1.0
To: Maven Users List <users@maven.apache.org>
Subject: Re: move data from pom to class or class to pom
References: <OF1F05DF42.E00CE028-ON85257D17.0063A305-85257D17.00648730@belden.com> <CADN69ymG8f7j19xuCtUqdXx8yJoLYgaNGuHiyrQcUApdhcUJxA@mail.gmail.com> <OFB1EFD901.4439AF23-ON85257D17.00661468-85257D17.0066DE86@belden.com> <lq83h1$9or$1@ger.gmane.org> <53C7E94E.1010302@gmx.de> <lqahle$ln9$1@ger.gmane.org>
In-Reply-To: <lqahle$ln9$1@ger.gmane.org>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-Provags-ID:  V03:K0:lafdRzg5DUpkkRLjdra70iF33+djbChUcZuX32N+KcC4nqg/F4Q
 Z/nzm90LTZMDS7B22FdaBh25owNbA1LTH0aRXEEV2fB4y5lt7FzKqWeZFDdvSAEoTxSYonI
 wgydtgrbuh/e8ASBD0a6LHzdtIVa4R411noP/6lBwxjYvMauimx6UsEFkB2t8eykDv0x4PN
 agWfFJN3ZBkdahT3TPQlQ==
X-Virus-Checked: Checked by ClamAV on apache.org

Hi JÃ¶rg,

 >
> nice article ;-)
>
> There's one comment I do not understand though:
>
>> The main disadvantage of this approach is that you can only use the
>> Implementation and Specification parts of your MANIFEST.MF file which
>> might be enough in some situations but not in all.

The comment is related to the implementation in Java which allows only 
to extract the implementation and specification part...via
this.getClass().getPackage()....

http://docs.oracle.com/javase/7/docs/api/java/lang/Package.html
So can't use that in a very simple way...

>
> You can add all kind of entries to the manifest. You may even overwrite the
> defaults. We use typically:

Of course you can so create an appropriate MANIFEST.MF file...

>
> ===================== %< ======================
>   <archive>
>     <manifest>
>       <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
>       <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
>     </manifest>						
>     <manifestEntries>
>       <Specification-Version>${parsedVersion.majorVersion}.
> ${parsedVersion.minorVersion}</Specification-Version>
>       <X-Compile-Source>${java.version.source}</X-Compile-Source>
>       <X-Compile-Target>${java.version.target}</X-Compile-Target>
>       <X-Builder>Maven ${maven.version}</X-Builder>
>       <X-Build-Time>${maven.build.timestamp}</X-Build-Time>
>       <X-Build-Os>${os.name}</X-Build-Os>
>     </manifestEntries>
>   </archive>
> ===================== %< ======================
>
> With the $parsedVersion and $maven.version variables provided by the build-
> helper plugin.
But the above entries can't be read via methods which already exists 
like getPackage()....

So you need to implement it your own...you have to take care about 
classloading issue (classloaders in particular in larger apps etc.)...
so it get more and more complicated...lets talk about apps which 
comprise of 150 jar files...

So the simplest Solution is to use the templating-maven-plugin which 
solves many of those issues.

Kind regards
Karl-Heinz Marbaise


---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


