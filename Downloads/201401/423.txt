From users-return-135309-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Jan 31 10:21:26 2014
Return-Path: <users-return-135309-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 9DE24100C4
	for <apmail-maven-users-archive@www.apache.org>; Fri, 31 Jan 2014 10:21:26 +0000 (UTC)
Received: (qmail 42209 invoked by uid 500); 31 Jan 2014 10:21:23 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 41941 invoked by uid 500); 31 Jan 2014 10:21:22 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 41933 invoked by uid 99); 31 Jan 2014 10:21:22 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 31 Jan 2014 10:21:22 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of stephane.nicoll@gmail.com designates 209.85.216.169 as permitted sender)
Received: from [209.85.216.169] (HELO mail-qc0-f169.google.com) (209.85.216.169)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 31 Jan 2014 10:21:16 +0000
Received: by mail-qc0-f169.google.com with SMTP id w7so6748032qcr.14
        for <users@maven.apache.org>; Fri, 31 Jan 2014 02:20:56 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=HGfR6fERrr/rCXkMDOmTLhABMlFR/6sBqZlXLTG4abU=;
        b=YZvVAGj3YFyo9U/IYxP+U2Wz+ZnFXPnStnc4PzRoaQ29c2LIXgwoynuIdrVly/Te7+
         MGnUbT8Nsb+UM9kx2eZb3o9samqFzbWv3XZv3RY0WgjGjO5vJPyPdcg0RUrwRG+YrYyy
         8IkSFqMdDYPndhxYDHXzto02RsUvQ2DBkpPXqULFvGrUf59HRe4jsF2QuB8CobhVVT6u
         XJQmPPri2ybkecr2KMXvCeW2708NotUDecFX+ir5AYkRFAhlIEtaPf+/cFosIOurQHRs
         7CjXQiUK/fuzkfrZ5YIZi+E1nIU5uD+r3K0EDQt94mUfA4Tln4qQBLb00ugiaTlPA4Zd
         7ayw==
MIME-Version: 1.0
X-Received: by 10.224.161.5 with SMTP id p5mr30164316qax.32.1391163656343;
 Fri, 31 Jan 2014 02:20:56 -0800 (PST)
Received: by 10.140.26.196 with HTTP; Fri, 31 Jan 2014 02:20:56 -0800 (PST)
Date: Fri, 31 Jan 2014 11:20:56 +0100
Message-ID: <CAOonohfsbrJ-7pxsEYFhLJvzb9KS+V6tnM0Je46Ep3m8YLFWSg@mail.gmail.com>
Subject: dependency management across projects
From: Stephane Nicoll <stephane.nicoll@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=089e0149cae68f975e04f1418723
X-Virus-Checked: Checked by ClamAV on apache.org

--089e0149cae68f975e04f1418723
Content-Type: text/plain; charset=ISO-8859-1

Hi,

I was wondering if anyone knows or has experience with a system that would
track and consolidate dependencies on a project composed of several
sub-projects.

Assume a project P with 10 sub-projects (SP1...SP10). Each of those
sub-projects are located in its own space and have its own lifecycle
(release versioning, etc). But ultimately, the project P needs to be
released as a set of coherent *tested* dependencies. For various reasons,
some sub-projects have to keep different dependencies of the target for
backward compatibility reason.

There are two deliverables to this:

1. Provide a single/coherent dependencyManagement section so that users
using P do not have to care about the different versions of the
sub-projects: they use P and all the required dependencies are pulled
automatically
2. Build configs that *force* each sub-project to run with the list of
dependencies for the project (to ensure all tests pass, etc). This is to be
used alongside the regular build job for validation purpose

I started to look at this and my first trial was to generate a report with
all the dependencies of each project and build a consolidated report that I
can match against the candidates. This would help manage the first goal as
if a dependency gets added, removed or updated, the global
dependencyManagement has to be impacted manually (do we upgrade or not,
etc).

For the second part, it's not easy to force a dependency change in Maven,
especially if the version has been specified at the project level.

Thanks for reading that far. If you have any idea or know any organisation
that tried to implement that, I'd be interested

Thanks!
S.

--089e0149cae68f975e04f1418723--

