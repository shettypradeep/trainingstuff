From users-return-135001-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Mon Jan  6 23:58:08 2014
Return-Path: <users-return-135001-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 9919D108C2
	for <apmail-maven-users-archive@www.apache.org>; Mon,  6 Jan 2014 23:58:08 +0000 (UTC)
Received: (qmail 53297 invoked by uid 500); 6 Jan 2014 23:58:06 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 53203 invoked by uid 500); 6 Jan 2014 23:58:06 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 53195 invoked by uid 99); 6 Jan 2014 23:58:06 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 06 Jan 2014 23:58:06 +0000
X-ASF-Spam-Status: No, hits=-0.7 required=5.0
	tests=RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of baerrach@gmail.com designates 209.85.128.171 as permitted sender)
Received: from [209.85.128.171] (HELO mail-ve0-f171.google.com) (209.85.128.171)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 06 Jan 2014 23:58:00 +0000
Received: by mail-ve0-f171.google.com with SMTP id pa12so9731951veb.16
        for <users@maven.apache.org>; Mon, 06 Jan 2014 15:57:39 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=h5LBTBhMnTDkpRn+ltMgMMOWReDMJVnWET1yTepAEC8=;
        b=MC430stT1977fFXfOQ7dMV9+xT3WwECWq8uuddF5MFiCGMX6U0PYAIP1Drh/Wul+68
         mrtM+35GDbiKI4yErfkCbjB9DbRLpjrEve1ElswgCAXm+4TdInOHUXXAYOO7zqkjB6zJ
         EyMnDsKT1PhWLIqJSctpFtRt32/xSWv8XBrgGaHcx8g562ul5Wua7ij0iCDrw9XEMRdb
         Dh0ILmYSlwPGR6PpqfaBjRSzpdp1h+lVIhRC+uo+4YxCYFOlkKPvcJzrujWpdfKxCp/a
         cWcIqLJ7AXFeIYeLSn/qd8QehVO8AG91Rn65J3myuoBQpcrC0DYbMCodnXuLriRMIjFn
         p4Nw==
MIME-Version: 1.0
X-Received: by 10.58.85.133 with SMTP id h5mr4697092vez.4.1389052659314; Mon,
 06 Jan 2014 15:57:39 -0800 (PST)
Received: by 10.58.48.131 with HTTP; Mon, 6 Jan 2014 15:57:39 -0800 (PST)
In-Reply-To: <1389049947844-5780688.post@n5.nabble.com>
References: <1311115485921-4614001.post@n5.nabble.com>
	<CADVp3v9s=A2jSYCP10vSS_Or6RvBCZtgFOWmNFxQQ-s2yRLNyg@mail.gmail.com>
	<1311120899714-4614151.post@n5.nabble.com>
	<CADVp3v_=nJyeZUmcZMc2YmZtABEWENfwpm1BukVqYaO0Wbv0VQ@mail.gmail.com>
	<1311123142861-4614201.post@n5.nabble.com>
	<CADVp3v96Rz4D_UUOw6it9izLC4EbuHctActE03AOBFRKkH3htQ@mail.gmail.com>
	<1389049947844-5780688.post@n5.nabble.com>
Date: Tue, 7 Jan 2014 10:27:39 +1030
Message-ID: <CADVp3v9kscxFNveo1ufjf2CH9KDPf=nzK7YVS+YyQJU91nTy5g@mail.gmail.com>
Subject: Re: Misunderstanding modules: "Two or more projects in the reactor
 have the same identifier"
From: Barrie Treloar <baerrach@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: text/plain; charset=ISO-8859-1
X-Virus-Checked: Checked by ClamAV on apache.org

On 7 January 2014 09:42, erich8 <Eric.Herrmann@intermedix.com> wrote:
> Barrie Treloar wrote
>> When you build Product X the libraries A, B and C should already
>> exist.  You dont want to rebuild them just to build Product X, that
>> will slow down your development process.
>> Ideally A, B, and C are released versions, but if you find a bug in
>> them then you will be using SNAPSHOT versions, which will need to be
>> released separately prior to releasing Product X.
>> If developers are rarely touching the libraries then its better to let
>> your continuous build system (e.g. Jenkins) build the libraries and
>> Maven will automatically pull down the latest SNAPSHOT for you.
>> This way Developer D can fix a bug in A and Developer E will
>> automatically get the bug fix the next time they pull down the
>> SNAPSHOT build of library A, they no longer need to resync and
>> manually build.
>> You can configure how often Maven will check for a snapshot update
>> (see updatePolicy
>> http://maven.apache.org/ref/3.0.3/maven-settings/settings.html#class_snapshots)
>>
>> With a continuous build system in place whenever C changes it will
>> automatically schedule a build for A and B, run your unit tests and
>> report success or failure.
>> It should also then build Product X and Y for you (since a downstream
>> dependency changed), again running your unit tests.
>>
>> You will also want a Repository Manager so that it can keep some
>> control over how many SNAPSHOT versions to keep (otherwise you can
>> find yourself running out of disk space)
>>
>> Hope this helps some.
>
> I understand the need to treat internally-developed dependencies as actual
> dependencies rather than forcing them to be modules, but I'm having some
> problems with the workflow.
>
> When the project is relatively new and the internally-developed dependency
> "A" is no where near being mature, nearly every change being made to
> "Project X" requires a corresponding change to A. At this point in the
> development cycle (and for many months in the foreseeable future) I actually
> /do/ need to rebuild A every time I build X.
>
> I can setup our CI system so that A SNAPSHOTS are built and published to
> Nexus after every commit, but what about during development, before I'm
> ready commit my changes? Am I stuck with what my IDE provides? We have
> developers using a wide range of IDEs, or no IDE at all, so I was hoping
> that Maven itself would have some way of kicking off builds of downstream
> dependency A when X is built, if in fact that's what I want to do.

Ideally you want your development to be only against releases, but as
you notice in the early days that just can't happen.

One thing I neglected to mention is that publishing SNAPSHOT to a
repository can be a pain.

The reason is that while you are happily working with your artifacts,
if a new SNAPSHOT is published and Maven decides to start downloading
it then you can find your local development hosed by bugs in the new
SNAPSHOT.
Obviously there is a trade-off here. You want to see bugs quickly so
that you can get them fixed correctly - either your code, or the
dependency. But you can also waste a lot of time if you have people
checking in things that cause breakage all the time (perhaps you then
need to investigate why that is occurring and deal with that as well).
 You should be able to manage this with the --no-snapshot-updates
option so you can when you want to pull in newer SNAPSHOTS.  Just
remember that you may have to rebuild your code again so that your
local .m2 cache has your code changes in it and not the CI version.

The next thing to ask is who is making the changes to A and X.
If it is the same person then they dont need Maven yet.
They can build via the command line, IDE, whatever.
I prefer to let the IDE (Eclipse in my case) handle the incremental
build problems.
I keep working on whatever projects I need until they are ready to
commit into version control and the IDE will ensure that everything is
building correctly so I can run my unit tests, etc all in the IDE.
I'm not using Maven at all here.

Before I commit this to version control, then I break out Maven and
build the projects in the correct order and ensure everything works.
Once committed to version control then CI will publish the SNAPSHOTS
and other developers can then decide when they want to start using the
new SNAPSHOTS.

> Right now we're simply telling folks to build A, then build X. And this
> certainly makes sense when you step back and think about it... it's just not
> terribly convenient.

If those folks are working on A and X they dont have any other
options, they want to build their code with their changes and not
suddenly get something from CI (which obviously can not have their
changes in it).
For those working with IDEs they should be able to just work in the
IDE. I'm fairly sure there is Maven integration with m2e like features
in NetBeans and IDEA.
I dont understand how you can efficiently develop without an IDE and
I'm not prepared to spend any of my time trying to help them out :)

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


