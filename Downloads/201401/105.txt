From users-return-135065-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Thu Jan  9 21:14:50 2014
Return-Path: <users-return-135065-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id B8FC810526
	for <apmail-maven-users-archive@www.apache.org>; Thu,  9 Jan 2014 21:14:50 +0000 (UTC)
Received: (qmail 44296 invoked by uid 500); 9 Jan 2014 21:14:48 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 44218 invoked by uid 500); 9 Jan 2014 21:14:48 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 44210 invoked by uid 99); 9 Jan 2014 21:14:48 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Thu, 09 Jan 2014 21:14:48 +0000
X-ASF-Spam-Status: No, hits=-0.7 required=5.0
	tests=RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of mfriedenhagen@gmail.com designates 209.85.219.45 as permitted sender)
Received: from [209.85.219.45] (HELO mail-oa0-f45.google.com) (209.85.219.45)
    by apache.org (qpsmtpd/0.29) with ESMTP; Thu, 09 Jan 2014 21:14:43 +0000
Received: by mail-oa0-f45.google.com with SMTP id j17so1389682oag.18
        for <users@maven.apache.org>; Thu, 09 Jan 2014 13:14:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:from:date:message-id:subject:to:cc:content-type;
        bh=Ryy1+UXILl3aWVk2+5epGOFKoAOrsAFAbXurs3Ccq8s=;
        b=d+j2dEJZOT1/dq9wQPERAEqjhfzL48IG/2wwJYVeY34Uu/zCVPfvmScVy2RHQVy3Av
         hf89mCKfhZR5dGZpsi+prfO9LB/quUys1A85mrNJCZ8ldEZHLfHDtjLnwg6H+zmJorm2
         LAo1+oQmPwvLrrfTh3HKxK6K44kdERp+Pyu4AUm716d7ZbxokStFHVoKdIgQUj1zz14a
         kSJS5S2Oy0yc3gyaoHjLVlEorGu4RUMLrN/JGgxuuqyjK8/6EbXLspcZyapZ9L6bCX9K
         xgh3A4verAw5DWy+mneQ5oFzgiy5FB7H5kdYo37vO9XtQe8pMHq/opvFmMUQzQn00If/
         ilLw==
X-Received: by 10.182.204.41 with SMTP id kv9mr118693obc.78.1389302062395;
 Thu, 09 Jan 2014 13:14:22 -0800 (PST)
MIME-Version: 1.0
Received: by 10.182.24.227 with HTTP; Thu, 9 Jan 2014 13:13:41 -0800 (PST)
From: Mirko Friedenhagen <mfriedenhagen@gmail.com>
Date: Thu, 9 Jan 2014 22:13:41 +0100
Message-ID: <CAK8jvqxqt1L2+b6jFZdj7QcvqYn5ZTrBye3BKsvy2ZStGUOxgg@mail.gmail.com>
Subject: Options for producing class files with different compilers via Maven
To: Maven Users List <users@maven.apache.org>
Cc: jacoco-dev@googlegroups.com
Content-Type: text/plain; charset=UTF-8
X-Virus-Checked: Checked by ClamAV on apache.org

Hello,

in the JaCoCo project (a Java code coverage library which uses a Java
agent approach during runtime) we produce some false positives of
uncovered code because of unreachable (e.g. private constructor of a
util class) or synthetic java code (e.g. enum values()).

As we inspect the class files only, we may not (or better do not want
to) rely on parsing the source code for discovering such conditions.
During some experiments we detected that different compilers (javac vs
eclipse ecj) produce very different byte code in classes for the
above. This might be the case for different versions of Sun/Oracle JDK
or JDKs of other vendors as well. I already took a look at "Using
Non-Javac Compilers" of the maven-compiler-plugin[1]

Now my question:
- What would be the best approach to produce JARs which contain class
files of above mentioned false positives produced by the different
compilers?
- My first idea was to define a define a multi module project with a
JAR module which will only produce a source jar, which will be
unpacked as "generated-sources" in sibling modules which are then
compiled by the different compilers.

For additional ideas or caveats I would be grateful.


Regards Mirko
[0] https://github.com/jacoco/jacoco/wiki/FilteringOptions
[1] http://maven.apache.org/plugins/maven-compiler-plugin/non-javac-compilers.html
--
http://illegalstateexception.blogspot.com/
https://github.com/mfriedenhagen/ (http://osrc.dfm.io/mfriedenhagen)
https://bitbucket.org/mfriedenhagen/

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


