From users-return-135288-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Tue Jan 28 23:41:30 2014
Return-Path: <users-return-135288-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 50DF610F78
	for <apmail-maven-users-archive@www.apache.org>; Tue, 28 Jan 2014 23:41:30 +0000 (UTC)
Received: (qmail 10671 invoked by uid 500); 28 Jan 2014 23:41:26 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 10514 invoked by uid 500); 28 Jan 2014 23:41:26 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 10506 invoked by uid 99); 28 Jan 2014 23:41:26 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 28 Jan 2014 23:41:26 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: local policy)
Received: from [24.37.79.202] (HELO smtp.artifact-software.com) (24.37.79.202)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 28 Jan 2014 23:41:22 +0000
Received: from localhost (localhost.localdomain [127.0.0.1])
	by smtp.artifact-software.com (Postfix) with ESMTP id 027966A7916
	for <users@maven.apache.org>; Tue, 28 Jan 2014 18:41:00 -0500 (EST)
X-Virus-Scanned: amavisd-new at artifact-software.com
Received: from smtp.artifact-software.com ([127.0.0.1])
	by localhost (smtp.artifact-software.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id nvx1h2z1dCJC for <users@maven.apache.org>;
	Tue, 28 Jan 2014 18:40:49 -0500 (EST)
Received: from [192.168.3.170] (unknown [192.168.3.170])
	by smtp.artifact-software.com (Postfix) with ESMTP id 823EC6A76F1
	for <users@maven.apache.org>; Tue, 28 Jan 2014 18:40:49 -0500 (EST)
Message-ID: <52E84000.6090102@artifact-software.com>
Date: Tue, 28 Jan 2014 18:40:48 -0500
From: Ron Wheeler <rwheeler@artifact-software.com>
Reply-To: "users@maven.apache.org >> Maven Users List" <users@maven.apache.org>
Organization: Artifact Software
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.2.0
MIME-Version: 1.0
To: Maven Users List <users@maven.apache.org>
Subject: Re: Deployment to Tomcat (provided jars)
References: <1B8FF9BB83FDCE44AB581D7E394AB90D2A3D9AB5@USSTLDAGBE1.corp.amdocs.com>	<1B8FF9BB83FDCE44AB581D7E394AB90D2A3D9B3A@USSTLDAGBE1.corp.amdocs.com>	<CA+nPnMxQwbYrBEk_WuikwTMTnyO6jKOuBmn3KKqE+K7PM8c=gQ@mail.gmail.com>	<1B8FF9BB83FDCE44AB581D7E394AB90D2A3DB067@USSTLDAGBE1.corp.amdocs.com>	<1B8FF9BB83FDCE44AB581D7E394AB90D2A3DB0D2@USSTLDAGBE1.corp.amdocs.com> <CAHNdxumH73y96Ayhi1CgYYdAQVCXdjMqkxWfCdVUkUyUFkn-XQ@mail.gmail.com> <7FB4F0EC1916C84CBA95F6E5A360E40A0117E3D0C18C@ghex01.hq.ghds.net>
In-Reply-To: <7FB4F0EC1916C84CBA95F6E5A360E40A0117E3D0C18C@ghex01.hq.ghds.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Checked: Checked by ClamAV on apache.org

http://blog.artifact-software.com/tech/?tag=maven
This will get you to a series of articles on how we addressed some of 
the issues that you are raising.

Tomcat 7  has made some changes to make this easier but I have not tried 
to document how we are using this yet.




Ron

On 28/01/2014 2:34 PM, Scott Klein wrote:
> I was hoping that someone could either show me best practice or just comment on the correctness of my approach.
>
> We have multiple projects which run on our app server (tomcat). Therefore, we want our projects to share as much as possible when it comes to provided artifacts in order to reduce our war file size - so everyone relies on the same version of guava for example, which is defined in the dependency management section of our common-parent pom.
>
> We have configured our app servers to include a 2nd lib folder (call it "common-lib") - this is where we want to put all of our projects provided artifacts (after wiping the files in the folder out - hence the separate "common-lib" folder). Tomcat is setup to include this in its classpath.
>
> For example, our nightly build trigger would rm -f all jar files in the common-lib folder, then Project1 would build and push all of its provided jars up to common-lib, followed by Project2, and on, and on. At the end of the build you have a completely refreshed "common-lib" folder with all of the provided jars for each project. (Obviously, if this were the "live" common-lib this might be an issue so we have a "staging" area we actually deploy to - then in our tomcat startup script we replace the "live" common-lib files with those from the "staging" area)
>
> Obviously, if we do not keep a tight rein on dependency versions in project poms this could turn into a nightmare -- but let's assume we can do that.
>
> So here is the approach I am taking:
> 1. I use the maven-dependency-plugin to copy provided jars into "${project.build.directory}\provided" - I have tied this to <phase>package</phase>
>
> 2. I use the maven-antrun-plugin to scp all files in the "${project.build.directory}\provided" folder up to our "common-lib" folder on our app server - I have tied this to <phase>deploy<phase>
>
>
> I am afraid that maybe our horrible past practices have blinded me from seeing the Maven best practice, so I am looking for a reality check. To me, this seems like something that people would need to do all the time - but I can't seem to find anything that specifically relates to this approach.
>
>
> Side Note: As I was writing this I kept thinking "why not just deploy our wars with everything that they need, that would be much cleaner and more reproducible. We shouldn't care about artifact (war) file size if this happens in the middle of the night". Here is what I came up with -- we have one jar file that we build which has all of our hibernate code in it, it also generates all of our shared connections for all of our contexts (these are shared session factories). This single artifact *must* be shared - we simply cannot allow each war file to include its own copy - due to singleton style bootstrap of connections.
>
> Is it best practice for a war to deploy with all of its dependencies?
>
>
> Thanks, in advance
> scott
>
>
>
>
>
>
>
>
> __________ Information from ESET NOD32 Antivirus, version of virus signature database 9348 (20140128) __________
>
> The message was checked by ESET NOD32 Antivirus.
>
> http://www.eset.com
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> For additional commands, e-mail: users-help@maven.apache.org


-- 
Ron Wheeler
President
Artifact Software Inc
email: rwheeler@artifact-software.com
skype: ronaldmwheeler
phone: 866-970-2435, ext 102


---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


