From users-return-135318-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Jan 31 14:41:40 2014
Return-Path: <users-return-135318-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 27C60107FA
	for <apmail-maven-users-archive@www.apache.org>; Fri, 31 Jan 2014 14:41:40 +0000 (UTC)
Received: (qmail 79226 invoked by uid 500); 31 Jan 2014 14:41:36 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 78600 invoked by uid 500); 31 Jan 2014 14:41:30 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 78592 invoked by uid 99); 31 Jan 2014 14:41:28 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 31 Jan 2014 14:41:28 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: local policy)
Received: from [24.37.79.202] (HELO smtp.artifact-software.com) (24.37.79.202)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 31 Jan 2014 14:41:22 +0000
Received: from localhost (localhost.localdomain [127.0.0.1])
	by smtp.artifact-software.com (Postfix) with ESMTP id B5AD96A76F2
	for <users@maven.apache.org>; Fri, 31 Jan 2014 09:41:00 -0500 (EST)
X-Virus-Scanned: amavisd-new at artifact-software.com
Received: from smtp.artifact-software.com ([127.0.0.1])
	by localhost (smtp.artifact-software.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id eKef0LchdA5E for <users@maven.apache.org>;
	Fri, 31 Jan 2014 09:40:49 -0500 (EST)
Received: from [192.168.3.170] (unknown [192.168.3.170])
	by smtp.artifact-software.com (Postfix) with ESMTP id E59236A76F1
	for <users@maven.apache.org>; Fri, 31 Jan 2014 09:40:49 -0500 (EST)
Message-ID: <52EBB5EF.8010002@artifact-software.com>
Date: Fri, 31 Jan 2014 09:40:47 -0500
From: Ron Wheeler <rwheeler@artifact-software.com>
Reply-To: rwheeler@artifact-software.com
Organization: Artifact Software
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.2.0
MIME-Version: 1.0
To: users@maven.apache.org
Subject: Re: dependency management across projects
References: <CAOonohfsbrJ-7pxsEYFhLJvzb9KS+V6tnM0Je46Ep3m8YLFWSg@mail.gmail.com> <CAKDUN1vjCWVKV8BQZkjAW4Xb96z_41mhRmP=TNzLHxaX=YdCGg@mail.gmail.com>
In-Reply-To: <CAKDUN1vjCWVKV8BQZkjAW4Xb96z_41mhRmP=TNzLHxaX=YdCGg@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Checked: Checked by ClamAV on apache.org

As one of the fans of a non-Maven way to deal with this, I will point 
you to some documentation on the approach.

http://blog.artifact-software.com/tech/?tag=maven
This should get you 4 articles that discuss our approach to Maven.

http://blog.artifact-software.com/tech/?p=121
Specifically addresses the problem that you are working through.

It works well for us.
Our big project had over 30 independent modules that depended on more 
than 70 third party modules - Tomcat, Jetspeed, Apache Commons, Spring, 
Hibernate, Mysql JSF, CXF, Jasper Reports, etc.

We are currently actively developing 2 projects each with about 10 
modules (Maven Projects) with the same technology stack (Jackrabbit 
replacing MySQL and adding Spring-Data) and have continued the same 
approach.

It works well and makes the war files very small and cuts the build time 
dramatically.
It relieves the developer from dealing with versions and dependency 
configurations.
The individual shared libraries have the "right" versions with the 
required exclusions already fixed up so inter-library conflicts are 
resolved.
The developer just have to make sure that their code works.

If they want to add a third party library that is not included in the 
"corporate" utility libraries, this is supposed to be discussed at the 
project level to see if it should be shared or not.
We don't make a big deal about this now that we have a really good core 
stack settled.

At the beginning of each release cycle we review the "approved" versions 
and upgrade as appropriate. This lets us review and test dependency 
changes as a team.

We use the STS version of Eclipse so we have full support for Maven and 
can easily see where dependencies are coming from and where potential 
dependency conflicts occur between third party software so exclusions 
can be adjusted.


Ron

On 31/01/2014 5:33 AM, Anders Hammar wrote:
>> 1. Provide a single/coherent dependencyManagement section so that users
>> using P do not have to care about the different versions of the
>> sub-projects: they use P and all the required dependencies are pulled
>> automatically
>>
> Some confusion here. You're talking about depMgmt and then say that the
> required deps should be pulled in autoamtically. That will not happen. You
> still need to specify the deps you have.
> In any case, this is ok if you want to stay on the "Maven way". This
> depMgmt could be handled/provided in a separate pom which is then included
> in those projects that want to use the platform/product. Sometimes this is
> called a BOM (Bill of Material). JBoss provides such a BOM for their app
> server for example. A quick Google gave this page talking about that:
> http://www.mastertheboss.com/jboss-maven/maven-and-jboss-how-to-use-boms
>
> There is also the possibility of creating a "grouping pom", which lists all
> artifacts as dependencies. You would then declare a dependency to that
> grouping pom and get all deps magically sucked in. However, this is not
> really the "Maven way" in my opinion as you wouldn't specify your direct
> deps bu sort of relly on transitive deps. There are some fans of this
> approach though here on this list.
>
>
>> 2. Build configs that *force* each sub-project to run with the list of
>> dependencies for the project (to ensure all tests pass, etc). This is to be
>> used alongside the regular build job for validation purpose
>>
> Maybe some enforcer rule?
>
> /Anders
>
>
>> I started to look at this and my first trial was to generate a report with
>> all the dependencies of each project and build a consolidated report that I
>> can match against the candidates. This would help manage the first goal as
>> if a dependency gets added, removed or updated, the global
>> dependencyManagement has to be impacted manually (do we upgrade or not,
>> etc).
>>
>> For the second part, it's not easy to force a dependency change in Maven,
>> especially if the version has been specified at the project level.
>>
>> Thanks for reading that far. If you have any idea or know any organisation
>> that tried to implement that, I'd be interested
>>
>> Thanks!
>> S.
>>


-- 
Ron Wheeler
President
Artifact Software Inc
email: rwheeler@artifact-software.com
skype: ronaldmwheeler
phone: 866-970-2435, ext 102


---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


