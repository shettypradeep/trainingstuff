From users-return-134927-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Jan  3 22:03:50 2014
Return-Path: <users-return-134927-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id E9BD610905
	for <apmail-maven-users-archive@www.apache.org>; Fri,  3 Jan 2014 22:03:50 +0000 (UTC)
Received: (qmail 75939 invoked by uid 500); 3 Jan 2014 22:03:49 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 75870 invoked by uid 500); 3 Jan 2014 22:03:49 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 75862 invoked by uid 99); 3 Jan 2014 22:03:48 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 03 Jan 2014 22:03:48 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of ljnelson@gmail.com designates 209.85.128.48 as permitted sender)
Received: from [209.85.128.48] (HELO mail-qe0-f48.google.com) (209.85.128.48)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 03 Jan 2014 22:03:43 +0000
Received: by mail-qe0-f48.google.com with SMTP id gc15so16175972qeb.7
        for <users@maven.apache.org>; Fri, 03 Jan 2014 14:03:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=LfYlMl3I/+R0aizy4TuVFp2alMmGT3IKsuW2YdjITXI=;
        b=M34s3EUoWUYBVhQKNZgO739aXeJrI4r3rBCIAsghOmrYSTfqwG/Bpookb4nfnhzih5
         XCn0p0HVom6+TKY6eccIr8OvtMYntadLMTBu3a+itsot8ze3CueN/BPM4wKA8uNhD78n
         vMG/Z7Gpb7LUovF7IqJiITSbaC2xt9NlRXlvP0338+IPqm2yXUIKyQdgDs2hLSV0U2Xx
         mb7Ca7OGc5qOJkxsDKOk9Q+SCA0sWKJ/CMSrW8xDN/hs351im4vBLqhbG30izMsCqLzp
         JmeqOa6+PHgUpBdRvaZV4uGkZcvbuJr353oZdBzmm/mCQFa2HkLCIpNK26RH8erhkW7L
         bh3g==
MIME-Version: 1.0
X-Received: by 10.229.53.68 with SMTP id l4mr150508562qcg.21.1388786602554;
 Fri, 03 Jan 2014 14:03:22 -0800 (PST)
Received: by 10.96.169.200 with HTTP; Fri, 3 Jan 2014 14:03:22 -0800 (PST)
Date: Fri, 3 Jan 2014 14:03:22 -0800
Message-ID: <CAHNdxunwRmqstW5tL6D-G4ga0ASdGAnMWpGOyoE=db8-1_vpqQ@mail.gmail.com>
Subject: Topologically sorted list of Artifacts for use by a plugin?
From: Laird Nelson <ljnelson@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a1134a0d41d561104ef181483
X-Virus-Checked: Checked by ClamAV on apache.org

--001a1134a0d41d561104ef181483
Content-Type: text/plain; charset=UTF-8

Hello; in Maven 3.0.5 and 3.1.x, what is the preferred way, given a
MavenProject representing the current pom.xml/project, to obtain a list of
its resolved dependency Artifacts in test scope that has been topologically
sorted such that the Artifact at the head of the list has the fewest
dependencies and the artifact at the tail of the list has the most?

I asked this question many moons ago (
http://maven.40175.n5.nabble.com/Topologically-sorting-dependencies-tp3384898p3387803.html)
and after no answers, came up with what felt like an awful hack to produce
what I wanted, whose code I pasted in that message.

If you follow the link, you'll see that I used the ProjectSorter class,
which is what Maven's reactor uses when processing a multi-module
project--which gives me exactly the order I wanted--but seems like overkill
and like misusing a tool, and maybe isn't the Right Way given all the new
Aether stuff and whatnot.  Nevertheless, it is still how Maven's reactor
works, so...who knows.

Anyway, I started there and "worked backwards"--needed a List of
MavenProjects to feed to it, so ended up using the MavenProjectBuilder, as
you can see in the link.

That class has since been deprecated and moved to the compat layer, though,
and its replacement (another class named DefaultMavenProjectBuilder) has
removed the convenience method that I was using.  I'd like to update my
plugin to avoid depending on this deprecated subsystem.

So then: suppose I'm writing a Maven plugin that needs to fetch a
particular well-known classpath resource from all artifacts available in
test scope, and needs that list to be in topological order (starting with
an artifact that has the fewest dependencies and ending with the artifact
that has the most).  What is the preferred mechanism for doing this these
days?  Is it still by way of the ProjectSorter hammer?  Or is there a more
elegant way to do it?

(As background: I am working with Liquibase (http://www.liquibase.org/).
 Each of my .jar projects has a META-INF/liquibase/changelog.xml file in
it.  Various of these .jar projects already depend on each other--for unit
and integration testing, I'd like to use this dependency order, harvest the
changelog.xml resources in each .jar file, and then combine them to create
only the database tables actually needed for the test.  If a.jar has A's
tables, and b.jar has B's tables and b.jar depends on a.jar, then I'd like
to run a.jar!/META-INF/liquibase/changelog.xml first, then
b.jar!/META-INF/liquibase/changelog.xml next, and I'd like to not have to
specify this in any place in my pom.xmls, since the dependency order is
already captured there.)

Best,
Happy 2014,
Laird

-- 
http://about.me/lairdnelson

--001a1134a0d41d561104ef181483--

