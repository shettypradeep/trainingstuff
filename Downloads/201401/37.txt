From users-return-135276-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Tue Jan 28 20:23:23 2014
Return-Path: <users-return-135276-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id D3B53104B8
	for <apmail-maven-users-archive@www.apache.org>; Tue, 28 Jan 2014 20:23:23 +0000 (UTC)
Received: (qmail 91037 invoked by uid 500); 28 Jan 2014 20:23:20 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 90898 invoked by uid 500); 28 Jan 2014 20:23:19 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 90890 invoked by uid 99); 28 Jan 2014 20:23:19 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 28 Jan 2014 20:23:19 +0000
X-ASF-Spam-Status: No, hits=1.0 required=5.0
	tests=FORGED_YAHOO_RCVD,RCVD_IN_DNSWL_NONE,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: local policy)
Received: from [98.138.91.58] (HELO nm17-vm0.bullet.mail.ne1.yahoo.com) (98.138.91.58)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 28 Jan 2014 20:23:12 +0000
Received: from [98.138.101.132] by nm17.bullet.mail.ne1.yahoo.com with NNFMP; 28 Jan 2014 20:22:51 -0000
Received: from [98.138.226.58] by tm20.bullet.mail.ne1.yahoo.com with NNFMP; 28 Jan 2014 20:22:51 -0000
Received: from [127.0.0.1] by smtp209.mail.ne1.yahoo.com with NNFMP; 28 Jan 2014 20:22:51 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com; s=s1024; t=1390940571; bh=aaLUoY3eIanNgYFXKLpYlb1x0P02J1QwO38NXXz1Mvs=; h=X-Yahoo-Newman-Id:X-Yahoo-Newman-Property:X-YMail-OSG:X-Yahoo-SMTP:X-Rocket-Received:Message-ID:Date:From:User-Agent:MIME-Version:To:Subject:References:In-Reply-To:Content-Type:Content-Transfer-Encoding:X-Antivirus:X-Antivirus-Status; b=rbIdGC2Xpbg8Z8sJPRYqoa9KiUUNIO+m9N3Ku3+eMyT3MIsSIZwOMlSGQFaYaKzfF8YU9cD3sL4sO8VBDRPJDqzEf/8Qeng99gLwyPbVkWQJOko+h5P33AcmmZLt/5giIagpqTiEOhc9V2YP76LXZXPzINDFApccAfdArVGgNAc=
X-Yahoo-Newman-Id: 595042.90460.bm@smtp209.mail.ne1.yahoo.com
X-Yahoo-Newman-Property: ymail-3
X-YMail-OSG: pSoL_sEVM1nB.P3p2_lujhoiM1jYmjBz0qYfb5qq86rCTMa
 Lsvv9iWF4hh_zTCeBnK6AtPMcXYPPo4qMT5e925objDy2AQuBOh5nOfEUuit
 PHSFOCaDXOVpBjGnHTHf4hdSdOEvcSuCxkudu5uu_xFOCuiZbKr_dYE4u2OA
 XxyhjhgTrRyutSHLMqlengdO9GMrx7E24CtVsjZbkq7.PVHLxEKB_EzPq0d.
 ue93V519ZoznrrNCrL6BPanewpEP4T0436TFNQUy5E8yDkTzRm6AD6CU69fn
 YGhgs6XbSr2OM1GKnqSY0Tr3m4bMT51uGjkHrmu1uhdCT3WEYiUmPOSE2cOS
 CvWsYV9wxS0tIdI5Lg_1pf5FNl6VLF2d7KvEFKEdKBBUt24awqdd8j6nYOJG
 X80tgitfOaBsoafOAUu0MnMYKw.x8Rza4_xCArEkmMFWkz5fCCH.JViOLyrL
 He5GfQh08ViwkGBVJ1Jhx7vJCQ3YPvE_3sZ4sI6pzeqaNwfsll4DUcZ9cGbp
 ClqWjKPFtQAW2V4Jeic9pWjMRKXbb6TfVgdeBbAyObQtrbOYvQdU-
X-Yahoo-SMTP: PKuT8k2swBCeFOHzkGy5rTOUTa2hBxlR
X-Rocket-Received: from [127.0.0.1] (its_toasted@108.13.36.11 with plain [98.139.211.125])
        by smtp209.mail.ne1.yahoo.com with SMTP; 28 Jan 2014 20:22:51 +0000 UTC
Message-ID: <52E8115F.4030001@yahoo.com>
Date: Tue, 28 Jan 2014 12:21:51 -0800
From: Mark Eggers <its_toasted@yahoo.com>
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.2.0
MIME-Version: 1.0
To: Maven Users List <users@maven.apache.org>
Subject: Re: Deployment to Tomcat (provided jars)
References: <1B8FF9BB83FDCE44AB581D7E394AB90D2A3D9AB5@USSTLDAGBE1.corp.amdocs.com>	<1B8FF9BB83FDCE44AB581D7E394AB90D2A3D9B3A@USSTLDAGBE1.corp.amdocs.com>	<CA+nPnMxQwbYrBEk_WuikwTMTnyO6jKOuBmn3KKqE+K7PM8c=gQ@mail.gmail.com>	<1B8FF9BB83FDCE44AB581D7E394AB90D2A3DB067@USSTLDAGBE1.corp.amdocs.com>	<1B8FF9BB83FDCE44AB581D7E394AB90D2A3DB0D2@USSTLDAGBE1.corp.amdocs.com> <CAHNdxumH73y96Ayhi1CgYYdAQVCXdjMqkxWfCdVUkUyUFkn-XQ@mail.gmail.com> <7FB4F0EC1916C84CBA95F6E5A360E40A0117E3D0C18C@ghex01.hq.ghds.net>
In-Reply-To: <7FB4F0EC1916C84CBA95F6E5A360E40A0117E3D0C18C@ghex01.hq.ghds.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-Antivirus: avast! (VPS 140128-1, 01/28/2014), Outbound message
X-Antivirus-Status: Clean
X-Virus-Checked: Checked by ClamAV on apache.org

On 1/28/2014 11:34 AM, Scott Klein wrote:
> I was hoping that someone could either show me best practice or just
> comment on the correctness of my approach.
>
> We have multiple projects which run on our app server (tomcat).
> Therefore, we want our projects to share as much as possible when it
> comes to provided artifacts in order to reduce our war file size - so
> everyone relies on the same version of guava for example, which is
> defined in the dependency management section of our common-parent
> pom.
>
> We have configured our app servers to include a 2nd lib folder (call
> it "common-lib") - this is where we want to put all of our projects
> provided artifacts (after wiping the files in the folder out - hence
> the separate "common-lib" folder). Tomcat is setup to include this in
> its classpath.
>
> For example, our nightly build trigger would rm -f all jar files in
> the common-lib folder, then Project1 would build and push all of its
> provided jars up to common-lib, followed by Project2, and on, and on.
> At the end of the build you have a completely refreshed "common-lib"
> folder with all of the provided jars for each project. (Obviously, if
> this were the "live" common-lib this might be an issue so we have a
> "staging" area we actually deploy to - then in our tomcat startup
> script we replace the "live" common-lib files with those from the
> "staging" area)
>
> Obviously, if we do not keep a tight rein on dependency versions in
> project poms this could turn into a nightmare -- but let's assume we
> can do that.
>
> So here is the approach I am taking: 1. I use the
> maven-dependency-plugin to copy provided jars into
> "${project.build.directory}\provided" - I have tied this to
> <phase>package</phase>
>
> 2. I use the maven-antrun-plugin to scp all files in the
> "${project.build.directory}\provided" folder up to our "common-lib"
> folder on our app server - I have tied this to <phase>deploy<phase>
>
>
> I am afraid that maybe our horrible past practices have blinded me
> from seeing the Maven best practice, so I am looking for a reality
> check. To me, this seems like something that people would need to do
> all the time - but I can't seem to find anything that specifically
> relates to this approach.
>
>
> Side Note: As I was writing this I kept thinking "why not just deploy
> our wars with everything that they need, that would be much cleaner
> and more reproducible. We shouldn't care about artifact (war) file
> size if this happens in the middle of the night".

Yes, this is the way to go for a variety of reasons (most of which are 
better discussed on the Tomcat mailing list). Run Tomcat 7 (currently 
7.0.50), use parallel deployment, the Tomcat Maven plugin, and 
deployments should be seamless.

> Here is what I came
> up with -- we have one jar file that we build which has all of our
> hibernate code in it, it also generates all of our shared connections
> for all of our contexts (these are shared session factories).

I (think I) know how Hibernate works . . . So you have one JAR that 
contains the information for all of your connections? Each context then 
gets all of the connections?

I'm not sure I would agree with that practice. So your hibernate.cfg.xml 
has configurations for all of your connections? What happens if a 
particular web application doesn't need one or more of the connections?

> This single artifact *must* be shared - we simply cannot allow each war
> file to include its own copy - due to singleton style bootstrap of
> connections.

Singletons are isolated per web application. Again, this is more of a 
Tomcat question than a Maven one.

>
> Is it best practice for a war to deploy with all of its
> dependencies?
>
>
> Thanks, in advance scott

I'm new to Maven, so take the following with a grain (or two) of salt. 
I'm working on creating a rational build environment by doing the following:

1. Examine applications
2. Break up applications into reusable components (WAR, JAR, etc.)
    a. components should be as independent as possible
    b. reference coupled components as a POM dependency
    c. application-specific components belong solely in that application
3. If many projects have the same structure, make an archetype
4. Manage plugins in a parent POM

This all gets shunted off to an internal Nexus for artifact management, 
and an internal Jenkins for continuous build, test, and deployment.

I'm not there yet, but we've already seen gains in reproducible builds, 
ease of creating new projects, and earlier detection of issues.

. . . just my two cents.
/mde/

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


