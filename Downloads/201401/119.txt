From users-return-135315-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Jan 31 11:12:40 2014
Return-Path: <users-return-135315-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 62E1A10220
	for <apmail-maven-users-archive@www.apache.org>; Fri, 31 Jan 2014 11:12:40 +0000 (UTC)
Received: (qmail 49152 invoked by uid 500); 31 Jan 2014 11:12:36 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 48624 invoked by uid 500); 31 Jan 2014 11:12:35 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 48611 invoked by uid 99); 31 Jan 2014 11:12:34 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 31 Jan 2014 11:12:34 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of stephane.nicoll@gmail.com designates 209.85.216.54 as permitted sender)
Received: from [209.85.216.54] (HELO mail-qa0-f54.google.com) (209.85.216.54)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 31 Jan 2014 11:12:28 +0000
Received: by mail-qa0-f54.google.com with SMTP id i13so6065531qae.27
        for <users@maven.apache.org>; Fri, 31 Jan 2014 03:12:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=dwp2z9p9CuT76m7y/nP3gBbByhr65iWBd2ijv18Wogs=;
        b=tWr6WRg0gp06Um5XRNOF9jwwwsigsbgFv7i4Yu6hrbEtbXEVGZfSQXKMARVpPcLday
         LgObBq8uhS2C7i8L9GwotKXS3f86dCCEP9AdWIrETUUX/Ibo76pwxMXiQJW5ojP6BIXt
         +5bFOQlHDiOtg8qWX5B8pzQQLQhlKj0rgJIdnbr+LvV6QJ+PwA0HkHz0aOvN69tfHB1r
         SZzpk1k2yVym2jT42orF/IOgG9WxPhIQDcga2eB22SzIkUSn0axAmsRsxExb0xXuzicT
         oHFP2lMOcjQEOgXmEaSKAuKmHWTwCRkQHRw+YduSReivIuyKz7lnETt1dHYIlhueoG2w
         1wjQ==
MIME-Version: 1.0
X-Received: by 10.140.22.145 with SMTP id 17mr29079655qgn.0.1391166727403;
 Fri, 31 Jan 2014 03:12:07 -0800 (PST)
Received: by 10.140.26.196 with HTTP; Fri, 31 Jan 2014 03:12:07 -0800 (PST)
In-Reply-To: <CAKDUN1vjCWVKV8BQZkjAW4Xb96z_41mhRmP=TNzLHxaX=YdCGg@mail.gmail.com>
References: <CAOonohfsbrJ-7pxsEYFhLJvzb9KS+V6tnM0Je46Ep3m8YLFWSg@mail.gmail.com>
	<CAKDUN1vjCWVKV8BQZkjAW4Xb96z_41mhRmP=TNzLHxaX=YdCGg@mail.gmail.com>
Date: Fri, 31 Jan 2014 12:12:07 +0100
Message-ID: <CAOonohc6YwtXH-LtEHv3PGnv57cQ0YjWUvcTp9VZ1+Bj8DN7sQ@mail.gmail.com>
Subject: Re: dependency management across projects
From: Stephane Nicoll <stephane.nicoll@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a11c130109c404c04f1423e95
X-Virus-Checked: Checked by ClamAV on apache.org

--001a11c130109c404c04f1423e95
Content-Type: text/plain; charset=ISO-8859-1

Thanks for the response.

On Fri, Jan 31, 2014 at 11:33 AM, Anders Hammar <anders@hammar.net> wrote:

> >
> > 1. Provide a single/coherent dependencyManagement section so that users
> > using P do not have to care about the different versions of the
> > sub-projects: they use P and all the required dependencies are pulled
> > automatically
> >
>
> Some confusion here. You're talking about depMgmt and then say that the
> required deps should be pulled in autoamtically. That will not happen. You
> still need to specify the deps you have.
>

Yes, but not the versions. The users will have to add the dependency they
want to use, yes. The point here is that they don't have to care about the
versions (but I do, which is why I need some tooling)



> In any case, this is ok if you want to stay on the "Maven way". This
> depMgmt could be handled/provided in a separate pom which is then included
> in those projects that want to use the platform/product. Sometimes this is
> called a BOM (Bill of Material). JBoss provides such a BOM for their app
> server for example. A quick Google gave this page talking about that:
> http://www.mastertheboss.com/jboss-maven/maven-and-jboss-how-to-use-boms



BOM is exactly what I want to do, yes. What may not be clear in my original
post is that I am looking at this problem as the "release manager" of P who
wants to release P 1.0.0 with SP1 1.2.3, SP2 1.4.3, SP3 4.3.0, etc. I want
to have an overview of where the different sub-projects stands with regards
to the target for P.

Assume that each sub-project has its own release cycle (and is released as
a project on its own actually) and at some point those different projects
have to be released as a single coherent unit.


>
>
> There is also the possibility of creating a "grouping pom", which lists all
> artifacts as dependencies. You would then declare a dependency to that
> grouping pom and get all deps magically sucked in. However, this is not
> really the "Maven way" in my opinion as you wouldn't specify your direct
> deps bu sort of relly on transitive deps. There are some fans of this
> approach though here on this list.
>
>
> > 2. Build configs that *force* each sub-project to run with the list of
> > dependencies for the project (to ensure all tests pass, etc). This is to
> be
> > used alongside the regular build job for validation purpose
> >
>
> Maybe some enforcer rule?
>

Like I said, this is to be used alongside the regular build job. So my SP4
1.2.0-SNAPSHOT is building with a set of dependencies on its own and I want
to validate that with the dependencies of the target release for P, it is
also working just fine. It may just be the same ideally or slightly
different (or not slightly at all which requires an explicit validation).

So I need to be able to swap those versions for validation purposes and run
the build with that.

S.



>
> /Anders
>
>
> >
> > I started to look at this and my first trial was to generate a report
> with
> > all the dependencies of each project and build a consolidated report
> that I
> > can match against the candidates. This would help manage the first goal
> as
> > if a dependency gets added, removed or updated, the global
> > dependencyManagement has to be impacted manually (do we upgrade or not,
> > etc).
> >
> > For the second part, it's not easy to force a dependency change in Maven,
> > especially if the version has been specified at the project level.
> >
> > Thanks for reading that far. If you have any idea or know any
> organisation
> > that tried to implement that, I'd be interested
> >
> > Thanks!
> > S.
> >
>

--001a11c130109c404c04f1423e95--

