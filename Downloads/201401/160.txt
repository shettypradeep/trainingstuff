From users-return-135000-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Mon Jan  6 23:12:57 2014
Return-Path: <users-return-135000-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 05D061070D
	for <apmail-maven-users-archive@www.apache.org>; Mon,  6 Jan 2014 23:12:57 +0000 (UTC)
Received: (qmail 93686 invoked by uid 500); 6 Jan 2014 23:12:55 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 93611 invoked by uid 500); 6 Jan 2014 23:12:55 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 93603 invoked by uid 99); 6 Jan 2014 23:12:55 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 06 Jan 2014 23:12:55 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: local policy includes SPF record at spf.trusted-forwarder.org)
Received: from [216.139.236.26] (HELO sam.nabble.com) (216.139.236.26)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 06 Jan 2014 23:12:49 +0000
Received: from [192.168.236.26] (helo=sam.nabble.com)
	by sam.nabble.com with esmtp (Exim 4.72)
	(envelope-from <Eric.Herrmann@intermedix.com>)
	id 1W0JLP-0005FL-Rk
	for users@maven.apache.org; Mon, 06 Jan 2014 15:12:27 -0800
Date: Mon, 6 Jan 2014 15:12:27 -0800 (PST)
From: erich8 <Eric.Herrmann@intermedix.com>
To: users@maven.apache.org
Message-ID: <1389049947844-5780688.post@n5.nabble.com>
In-Reply-To: <CADVp3v96Rz4D_UUOw6it9izLC4EbuHctActE03AOBFRKkH3htQ@mail.gmail.com>
References: <1311115485921-4614001.post@n5.nabble.com> <CADVp3v9s=A2jSYCP10vSS_Or6RvBCZtgFOWmNFxQQ-s2yRLNyg@mail.gmail.com> <1311120899714-4614151.post@n5.nabble.com> <CADVp3v_=nJyeZUmcZMc2YmZtABEWENfwpm1BukVqYaO0Wbv0VQ@mail.gmail.com> <1311123142861-4614201.post@n5.nabble.com> <CADVp3v96Rz4D_UUOw6it9izLC4EbuHctActE03AOBFRKkH3htQ@mail.gmail.com>
Subject: Re: Misunderstanding modules: "Two or more projects in the reactor
 have the same identifier"
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Virus-Checked: Checked by ClamAV on apache.org

Barrie Treloar wrote
> When you build Product X the libraries A, B and C should already
> exist.  You dont want to rebuild them just to build Product X, that
> will slow down your development process.
> Ideally A, B, and C are released versions, but if you find a bug in
> them then you will be using SNAPSHOT versions, which will need to be
> released separately prior to releasing Product X.
> If developers are rarely touching the libraries then its better to let
> your continuous build system (e.g. Jenkins) build the libraries and
> Maven will automatically pull down the latest SNAPSHOT for you.
> This way Developer D can fix a bug in A and Developer E will
> automatically get the bug fix the next time they pull down the
> SNAPSHOT build of library A, they no longer need to resync and
> manually build.
> You can configure how often Maven will check for a snapshot update
> (see updatePolicy
> http://maven.apache.org/ref/3.0.3/maven-settings/settings.html#class_snapshots)
> 
> With a continuous build system in place whenever C changes it will
> automatically schedule a build for A and B, run your unit tests and
> report success or failure.
> It should also then build Product X and Y for you (since a downstream
> dependency changed), again running your unit tests.
> 
> You will also want a Repository Manager so that it can keep some
> control over how many SNAPSHOT versions to keep (otherwise you can
> find yourself running out of disk space)
> 
> Hope this helps some.

I understand the need to treat internally-developed dependencies as actual
dependencies rather than forcing them to be modules, but I'm having some
problems with the workflow. 

When the project is relatively new and the internally-developed dependency
"A" is no where near being mature, nearly every change being made to
"Project X" requires a corresponding change to A. At this point in the
development cycle (and for many months in the foreseeable future) I actually
/do/ need to rebuild A every time I build X.

I can setup our CI system so that A SNAPSHOTS are built and published to
Nexus after every commit, but what about during development, before I'm
ready commit my changes? Am I stuck with what my IDE provides? We have
developers using a wide range of IDEs, or no IDE at all, so I was hoping
that Maven itself would have some way of kicking off builds of downstream
dependency A when X is built, if in fact that's what I want to do.

Right now we're simply telling folks to build A, then build X. And this
certainly makes sense when you step back and think about it... it's just not
terribly convenient.



--
View this message in context: http://maven.40175.n5.nabble.com/Misunderstanding-modules-Two-or-more-projects-in-the-reactor-have-the-same-identifier-tp4614001p5780688.html
Sent from the Maven - Users mailing list archive at Nabble.com.

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


