From users-return-137792-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Nov 21 08:52:44 2014
Return-Path: <users-return-137792-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 0C2FCC916
	for <apmail-maven-users-archive@www.apache.org>; Fri, 21 Nov 2014 08:52:44 +0000 (UTC)
Received: (qmail 14941 invoked by uid 500); 21 Nov 2014 08:52:41 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 14864 invoked by uid 500); 21 Nov 2014 08:52:41 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 14851 invoked by uid 99); 21 Nov 2014 08:52:41 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 21 Nov 2014 08:52:41 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of anders.g.hammar@gmail.com designates 209.85.212.179 as permitted sender)
Received: from [209.85.212.179] (HELO mail-wi0-f179.google.com) (209.85.212.179)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 21 Nov 2014 08:52:15 +0000
Received: by mail-wi0-f179.google.com with SMTP id ex7so8039486wid.0
        for <users@maven.apache.org>; Fri, 21 Nov 2014 00:52:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date:message-id:subject
         :from:to:content-type;
        bh=4SgjrOmVoF6T06gQIE0taQKy5ogHiygnqZ0gkczdANU=;
        b=0mYnQeRiiesO6c1UyikjdbD5hzIpnm36xHqAeaaFlvtT5CVSMyrai3HntZjD+FkBBX
         VnEYfmAo+6LWbdvysqBhb/8NuG4RYtecoZSW7YtJnd2kJAXVNiwhqEG6UEWSgAwHsjTM
         usdIPj04YB9FW4L+HEK6PJIWO5QiKGs1iY2aN2ZyrCij4UNGRkT9HxjwP4NGBao2KAhI
         m4RCYgNJLiQHmi+zeDv0KhVGSNivu1rvUCwBctqccS/Hrm4W8UWBa82Vx5wcp8BL6D1r
         K8s/Obz0QmNaoz2X9id5iF/+rEfWKkzUO9v82bOeGCq5/8Z5jDqc9Npm/AdCEcSlk+Ev
         xxcA==
MIME-Version: 1.0
X-Received: by 10.180.126.104 with SMTP id mx8mr8773453wib.21.1416559933926;
 Fri, 21 Nov 2014 00:52:13 -0800 (PST)
Sender: anders.g.hammar@gmail.com
Received: by 10.194.165.74 with HTTP; Fri, 21 Nov 2014 00:52:13 -0800 (PST)
In-Reply-To: <7FB4F0EC1916C84CBA95F6E5A360E40A013E123AAC85@ghex01.hq.ghds.net>
References: <7FB4F0EC1916C84CBA95F6E5A360E40A013E123AAC85@ghex01.hq.ghds.net>
Date: Fri, 21 Nov 2014 09:52:13 +0100
X-Google-Sender-Auth: REr4BfTnmYIxqqZ1ks_lrN2Nyi4
Message-ID: <CAKDUN1uWAU+QEx_A=7V408kk5VZFp2riT9YebP3fp2YxDhygbg@mail.gmail.com>
Subject: Re: Producing and building against separate branches
From: Anders Hammar <anders@hammar.net>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=e89a8f839ce5aa343405085a8f91
X-Virus-Checked: Checked by ClamAV on apache.org

--e89a8f839ce5aa343405085a8f91
Content-Type: text/plain; charset=UTF-8

As no one else has jumped on this, I'd like to pass on some hints/pointers.
They are based on my own experience and also my rule om thumb for Maven
practice.

First, never use the finalName. It will only affect the name of the locally
produced artifact (typically in the target folder). It will not affect the
artifact name in the Maven repo, which is what really matters. So using it
will only give you a false feeling of a solution which will break sooner or
later.

Second, never use profiles. Well, profiles is simply the starting point to
nightmares and very bad Maven solutions. There are many threads on this.
Just stay away of them...:-)

Third, classifiers are typically not something that you should use. There
are some cases where they could be used, but try to stay away from them.

Saying that, I think the solution for you is to have different versions if
you want to differentiate the branches. Could be, for example, 1.0.0
(-SNAPSHOT) for the RC branch and 1.1.0 (-SNAPSHOT) for trunk. I don't
understand the point of having two RC branches though. Are they for the
same release (version) or two different releases? If you, strangely I'd
say, have two RC branches for the same "release" you should add some
postfix to the version. For example 1.0.0 (-SNAPSHOT) and 1.0.0-EXTRACOOL
(-SNAPSHOT).

/Anders

On Thu, Nov 20, 2014 at 12:14 AM, Scott Klein <Scott.Klein@goldenhour.com>
wrote:

> Here is our scenario:
>
> We have our SCM trunk and a "release candidate" branch. We merge code into
> the "RC" branch when we want it to go into the next release.
>
> In the past everyone built against the RC branch artifacts. However, now
> we have two release cycles going at the same time and some people want to
> build against the RC branch and others want to build against the trunk. We
> also need to setup servers, etc with the proper artifacts.
>
> So, I think I need to produce two artifacts for each project:
> "project-version.jar" and "project-version-trunk.jar". This, I think is
> simple, I just set the <finalName> in the trunk profile.
>
> Now, how do I use these so that a user building under the "trunk" profile
> will only use artifacts with the new classifier?
>
> We have a parent POM, used everywhere, that defines all of our dependency
> management to insure everyone stays "on version" for all of our
> dependencies. Could I create a property in the "trunk" profile and then use
> that in our dependency  management? For example:
>
> <profile>
>                 <id>trunk</id>
>                 <build>
>
> <finalname>${project.artifactId}-${project.version}-head<finalName>
>                 </build>
>                 <properties>
>                                 <our.classifier>head</our.classifier> <--
> property to use in dependencies
>                 </properties>
>                 ...
> </profile>
>
> <dependencyManagement>
>                 <dependencies>
>                                 <dependency>
>                                                 <groupId>com.ours</groupId>
>
> <artifactId>project1</artifactId>
>
> <version>${project.version}</version>
>
> <classifier>${our.classifier}</classifier> <-- use of the property (if the
> property DNE, or is blank, is that OK?
>                                 </dependency>
>                                 ...
>                 </dependencies>
> </dependencyManagement>
>
>
>
> This is just me using my limited understanding trying to figure out the
> solution - if there is a more appropriate way to do this please let me know
>
>
> Thanks
> scott
>
>

--e89a8f839ce5aa343405085a8f91--

