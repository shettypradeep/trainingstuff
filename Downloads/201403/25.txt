From users-return-135765-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Tue Mar 11 08:35:37 2014
Return-Path: <users-return-135765-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 5F626104B3
	for <apmail-maven-users-archive@www.apache.org>; Tue, 11 Mar 2014 08:35:37 +0000 (UTC)
Received: (qmail 52561 invoked by uid 500); 11 Mar 2014 08:35:33 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 51956 invoked by uid 500); 11 Mar 2014 08:35:25 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 51942 invoked by uid 99); 11 Mar 2014 08:35:22 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 11 Mar 2014 08:35:22 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: local policy includes SPF record at spf.trusted-forwarder.org)
Received: from [74.125.82.44] (HELO mail-wg0-f44.google.com) (74.125.82.44)
    by apache.org (qpsmtpd/0.29) with ESMTP; Tue, 11 Mar 2014 08:35:15 +0000
Received: by mail-wg0-f44.google.com with SMTP id m15so7348196wgh.3
        for <users@maven.apache.org>; Tue, 11 Mar 2014 01:34:54 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-gm-message-state:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:content-type;
        bh=RVlz/qnQ16SwpI5QVM6ZfDPf6vxSGHynA0+MT/+XtLQ=;
        b=IYnxxyj/RLB+VN86vh6kebnT3LaeCFojHmEVyhGU8nFKYX4gveN2pOXWN09ejDgdY1
         SIuVnMk7zINz+LbTn4pE7ylLPXglGs9BBGbjRhtqjdHqPX5Z7TkffIB6cjSSvFYxXSJ+
         NNBGfYDLv7i9AuLfHPycgtbpWm94dbo7TcwdKfTVAKyR6gMs0OeT2vGdDEnze6hTUse2
         pjmEvj/fbopTG6UQX+7PiUj1wLQsEvpXe2tR+5y3fauNPiAWFVKP+b3t1aR0Ou7xRRL9
         EYJtwMfARKrDb6+dH+/P5mRg8au6hQTeIVvuxxCESgvITNyYy3jyqS8V+Ilx3lMS63Sg
         xNYA==
X-Gm-Message-State: ALoCoQleQB+3wUebBrKFUharqnAtPjJDJpUdOmfU4TYdc3WUCpBShcB11YDVfQqJFZmQio7SRA9m
MIME-Version: 1.0
X-Received: by 10.180.91.164 with SMTP id cf4mr2038834wib.37.1394526894715;
 Tue, 11 Mar 2014 01:34:54 -0700 (PDT)
Received: by 10.217.142.143 with HTTP; Tue, 11 Mar 2014 01:34:54 -0700 (PDT)
X-Originating-IP: [101.165.182.12]
In-Reply-To: <EC1820CB-E6FC-4202-B6AB-06090103ADDA@gmail.com>
References: <CAEBcyzqFMx09wypuh4bXUd68FZ+TUegEnpMUs3ffje3DWS=eCg@mail.gmail.com>
	<3E4BAFCA-287A-42F4-BCF0-21B8B8B4FA79@gmail.com>
	<CAEBcyzqHw_S+OL0u5bYR_e+MYJT97eVd2j44hrUhX9nt8U88kA@mail.gmail.com>
	<EC1820CB-E6FC-4202-B6AB-06090103ADDA@gmail.com>
Date: Tue, 11 Mar 2014 18:34:54 +1000
Message-ID: <CAEBcyzp6M9WRwT=XR+ju2KEpFi5wbXeEy1X-yB0whBrL+dfMUg@mail.gmail.com>
Subject: Re: Guice provision error with AbstractMavenLifecycleParticipant
From: William Ferguson <william.ferguson@xandar.com.au>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=f46d04389343308d0204f4509870
X-Virus-Checked: Checked by ClamAV on apache.org

--f46d04389343308d0204f4509870
Content-Type: text/plain; charset=ISO-8859-1

Just for anyone coming after me ..

Ended up rewriting everything that referenced Aether to use dependency-tree
instead. It was definitely the way to go. Made everything much cleaner and
simpler and firewalled up from directly using Maven 3.0 or 3.1 code.

Thanks for all your help Stuart. It was much appreciated.

William


On Sun, Mar 2, 2014 at 6:23 AM, Stuart McCulloch <mcculls@gmail.com> wrote:

> On 1 Mar 2014, at 19:12, William Ferguson <william.ferguson@xandar.com.au>
> wrote:
>
> > Thanks for the exceptionally clear explanation Stuart.
> >
> > I don't think we can just avoid the exception with stubbed
> implementations
> > of the Resolver because the the plugin doesn't use the Resolver directly.
> > It asks for an Aether RepositorySystem:
> >    @Requirement
> >    private RepositorySystem repoSystem;
> >
> > which is what instantiates the VersionResolver.
>
> I don't think this is an issue, just declaring a dummy component locally
> using @Component should satisfy the missing binding that leads to the
> original exception.
>
> In other words: at the moment you have a broken dependency chain that
> stops Guice from creating an instance of the repository system - if you
> provide a dummy link in the form of a local @Component(hint="dummy") that
> implements VersionResolver then the chain will be complete from the
> perspective of the current plugin and the repository system can be created.
> Of course you can't then do much with it because it would be using the
> dummy resolver, but it would avoid the original exception at creation time
> and allow the IntelliJ pom processing to continue. Note you may also need
> to stub out other resolver components required by the repository system.
>
> Of course as Manfred points out, if IntelliJ updated their bundled version
> of Maven to 3.1.x or later then that would also solve the problem and
> doesn't require any plugin changes.
>
> > I'll have another look at maven-dependency-tree but I didn't see a clear
> > path towards what we wanted.
> >
> > Could you shed some more light on:
> >> Unfortunately adding a direct plugin dependency to the
> > maven-aether-provider from 3.1.1 won't help
> >> because Maven will filter out this dependency as being supplied from
> > Maven core
> >
> > What's doing the filtering and why?
>
> IIRC this is done in DefaultClassRealmManager from maven-core... the reason
> it filters out dependencies/packages explicitly exported by core is to
> avoid class consistency issues, otherwise you could end up with the same
> class being defined twice, once by the core class loader and once by a
> plugin's class loader. Such classes would then be incompatible as they were
> defined by different class loaders and couldn't then be used for sharing
> data, such as sharing repository information between core and a plugin.
>
> > What would be need to make it not filter out a maven-core library that
> is a
> > different version of the running Maven instance?
>
> You can't without doing some complicated class loader hacks, this is a
> fundamental feature of Maven's plugin system.
>
> > William
> >
> > On Fri, Feb 28, 2014 at 12:13 PM, Stuart McCulloch <mcculls@gmail.com
> >wrote:
> >
> >> On 28 Feb 2014, at 01:17, William Ferguson <
> william.ferguson@xandar.com.au>
> >> wrote:
> >>
> >>> As part of the development of the android-maven-plugin we have need to
> >> add
> >>> in an AbstractMavenLifecycleParticipant so that we can modify the
> compile
> >>> classpath to add artefacts that are contained within a project's
> >>> dependencies. Igor provided a lot of the coaching on this.
> >>>
> >>> The build works fine. Does what is intended.
> >>>
> >>> But now, when you open a project in intelliJ13 that uses the
> >>> android-maven-plugin, IntelliJ declares a problem with the POM that
> >>> references our MavenLifecycleParticipant.
> >>>
> >>> What I'd like help with is:
> >>> 1) Is this a problem with the plugin itself. Ie have we defined
> something
> >>> incorrectly.
> >>> 2) Is it just a problem with how IntelliJ is parsing a POM that
> declares
> >>> the plugin.
> >>>
> >>> If it is (1), what do we need to do to fix it?
> >>>
> >>> However, I suspect it is (2) because similar error messages seem to
> occur
> >>> when plugins designed for Maven 3.1 (and the switch to Eclipse Aether
> >> from
> >>> Sonatype Aether) are used in a Maven-3.0 environment. I'm thinking that
> >>> maybe IntelliJ is using a Maven-3.0 core. But I'm really not sure and
> >> would
> >>> love some clarity from those who understand what is going on a bit
> >> better.
> >>> And if it is (2) is there anything we or IntelliJ can do to fix it?
> >>>
> >>> The plugin itself can be found at:
> >>> https://github.com/jayway/maven-android-plugin
> >>>
> >>> A project showing the failure can be found at:
> >>>
> >>
> https://github.com/jayway/maven-android-plugin-samples/tree/master/morseflash/morseflash-app
> >>>
> >>> And the error message is (visible via flyover in the POM editor window
> or
> >>> in idea.log):
> >>
> >> I can recreate the same exception on the command-line using the plugin
> >> with Maven 3.0.5 (after I removed the 3.1.1 pre-req from the plugin's
> >> pom.xml)
> >>
> >> The issue is that the plugin expects Maven core to supply an
> >> implementation of org.eclipse.aether.impl.VersionResolver, namely
> >> DefaultVersionResolver from maven-aether-provider.
> >>
> >> However in Maven 3.0.x the maven-aether-provider module only supplies an
> >> implementation of org.sonatype.aether.impl.VersionResolver ... which is
> why
> >> you see that exception :/
> >>
> >> Unfortunately adding a direct plugin dependency to the
> >> maven-aether-provider from 3.1.1 won't help because Maven will filter
> out
> >> this dependency as being supplied from Maven core
> >>
> >> If you want the plugin to work on both Maven 3.0.x and 3.1.x then you'll
> >> either need to use an API common to both (like the shared
> >> maven-dependency-tree component) or write two versions of the code that
> >> talks to Aether and select the appropriate one at runtime using
> reflection.
> >> But if you just want to avoid the exception when Intellij processes the
> >> pom.xml then you could conceivably provide dummy/stubbed @Component
> >> implementations of the Eclipse/Aether resolver, with the role set to a
> >> non-default value such as "dummy" so that it doesn't interfere with the
> >> default implementation provided in Maven 3.1.1
> >>
> >>> java.lang.RuntimeException: com.google.inject.ProvisionException:
> >>> Guice provision errors:
> >>>
> >>> 1) No implementation for org.eclipse.aether.impl.VersionResolver was
> >> bound.
> >>> while locating org.eclipse.aether.internal.impl.DefaultRepositorySystem
> >>> at
> >>
> ClassRealm[extension>com.jayway.maven.plugins.android.generation2:android-maven-plugin:3.9.0-rc.1,
> >>> parent: sun.misc.Launcher$AppClassLoader@39172e08]
> >>> at
> >>
> ClassRealm[extension>com.jayway.maven.plugins.android.generation2:android-maven-plugin:3.9.0-rc.1,
> >>> parent: sun.misc.Launcher$AppClassLoader@39172e08]
> >>> while locating org.eclipse.aether.RepositorySystem
> >>> while locating
> >>>
> >>
> com.jayway.maven.plugins.android.phase_prebuild.AarMavenLifecycleParticipant
> >>> at
> >>
> ClassRealm[extension>com.jayway.maven.plugins.android.generation2:android-maven-plugin:3.9.0-rc.1,
> >>> parent: sun.misc.Launcher$AppClassLoader@39172e08]
> >>> at
> >>
> ClassRealm[extension>com.jayway.maven.plugins.android.generation2:android-maven-plugin:3.9.0-rc.1,
> >>> parent: sun.misc.Launcher$AppClassLoader@39172e08]
> >>> while locating org.apache.maven.AbstractMavenLifecycleParticipant
> >>> annotated with
> >> @com.google.inject.name.Named(value=AarMavenLifecycleListener)
> >>>
> >>>
> >>> We are tracking this at:
> >>> https://code.google.com/p/maven-android-plugin/issues/detail?id=449
> >>>
> >>>
> >>> Any help appreciated.
> >>>
> >>>
> >>> William
> >>
> >>
> >> ---------------------------------------------------------------------
> >> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> >> For additional commands, e-mail: users-help@maven.apache.org
> >>
> >>
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> For additional commands, e-mail: users-help@maven.apache.org
>
>

--f46d04389343308d0204f4509870--

