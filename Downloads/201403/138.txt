From users-return-136024-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Sun Mar 30 15:05:54 2014
Return-Path: <users-return-136024-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 317C311270
	for <apmail-maven-users-archive@www.apache.org>; Sun, 30 Mar 2014 15:05:54 +0000 (UTC)
Received: (qmail 66584 invoked by uid 500); 30 Mar 2014 15:05:50 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 65981 invoked by uid 500); 30 Mar 2014 15:05:48 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 65965 invoked by uid 99); 30 Mar 2014 15:05:48 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 30 Mar 2014 15:05:48 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: local policy)
Received: from [85.13.134.252] (HELO dd12814.kasserver.com) (85.13.134.252)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 30 Mar 2014 15:05:43 +0000
Received: from [192.168.178.45] (p57A1445F.dip0.t-ipconnect.de [87.161.68.95])
	by dd12814.kasserver.com (Postfix) with ESMTPSA id 26BF511C02AB;
	Sun, 30 Mar 2014 17:05:21 +0200 (CEST)
References: <53358021.6010103@Kriegisch.name> <CAK8jvqxy+wdkOwz89T=p7oMVUn-q1WhNt7GRTqU0ZZ=Z1nqp7w@mail.gmail.com> <CANWgJS4GjG5UqVxDM+k4ayLgN05er0CxX1mw8QcNzfKT=NgE9Q@mail.gmail.com> <20140329103503.3472511C0FD1@dd12814.kasserver.com> <B8BD72DC-4BA8-4519-9860-72BBE04A2E02@Kriegisch.name> <CADN69ym4CoU1F8R8Dx=4nqa9P8E0DwUkqVEgtuxhr+f_ePAAuA@mail.gmail.com>
In-Reply-To: <CADN69ym4CoU1F8R8Dx=4nqa9P8E0DwUkqVEgtuxhr+f_ePAAuA@mail.gmail.com>
Mime-Version: 1.0 (1.0)
Content-Type: text/plain;
	charset=utf-8
Message-Id: <BD50A6EC-734F-46A3-9DF0-03D28385D21E@Kriegisch.name>
Content-Transfer-Encoding: quoted-printable
X-Mailer: iPad Mail (11D167)
From: Alexander Kriegisch <Alexander@Kriegisch.name>
Subject: Re: Overriding dependency scope
Date: Sun, 30 Mar 2014 17:05:21 +0200
To: Maven Users List <users@maven.apache.org>
X-Virus-Checked: Checked by ClamAV on apache.org

Hi Curtis.

I had also considered your approach before, but dislike the idea of structur=
ing my project based on the dependency scope of a single library. Moreover, w=
hat if I have several such libraries? Should I have n! different intermediat=
e modules?

Actually I found out that scope override works without any intermediate modu=
les. This is why compilation works, I guess. But my runtime tests do not wor=
k because the application is packed into an uber JAR via Maven Shade, and I s=
uspect Maven Shade not to recognise the overridden scope. BTW, running the a=
pplication from IntelliJ IDEA with Maven auto import also does not work. I g=
ot it working by specifying the groovy-all dependency redundantly in the mod=
ule responsible for packing the uber JAR. Another way of tricking Maven woul=
d be to use Maven Shade in the Groovy module and shade the dependency right i=
nto the module's artifact. That way the other module (packing the big JAR wi=
th all modules and external dependencies) would also see the Groovy runtime w=
ithout specifying a redundant dependency there.

I hope that was not too much information.

Is there any expert for Maven Shade out there who can tell me why Shade does=
 not notice my overridden dependency scope and automatically pack the Groovy=
 runtime into the uber JAR?
--=20
Alexander Kriegisch


> Am 30.03.2014 um 16:04 schrieb Curtis Rueden <ctrueden@wisc.edu>:
>=20
> Hi Alexander,
>=20
>> One new sub-module now actually also needs groovy-all, but with a
>> compile scope.
>=20
> There are a few different ways to solve this. Personally I have not had
> good luck trying to alter the scope of a dependency downstream (as Mirko
> suggested might be possible). But of course, one simple and hacky way is t=
o
> change the groovy-all dependency to compile at the root, and then it will
> be available to everything.
>=20
> Another less hacky possibility would be, as Baptiste suggests, to introduc=
e
> another layer of inheritance, although I would do it as follows:
>=20
> toplevel
> |-- intermediate-with-test-deps-declared
>   |-- x1
>   |-- x2
>   ...
>   |- xM
> |-- intermediate-with-groovy-all-at-compile-scope
>   |- y1
>   |- y2
>   ...
>   |- yN
>=20
> Where "x" modules need the groovy-all etc. deps at test scope, and "y"
> modules need groovy-all etc. at compile scope.
>=20
> In this way, you do not ever need to "override" a dependency scope from on=
e
> level to another level.
>=20
> Alternately, if you only have a single module that needs groovy-all at
> compile scope, it could just extend the toplevel parent directly instead o=
f
> introducing the "intermediate-with-groovy-all-at-compile-scope" layer. But=

> you might find that layer handy later as soon as a second such module come=
s
> into existence.
>=20
> A third possibility which might be more elegant in your situation, and
> closer to the infamous "Maven way", is called "import" scope; see:
> http://maven.apache.org/guides/introduction/introduction-to-dependency-mec=
hanism.html#Importing_Dependencies
>=20
> Regards,
> Curtis
>=20
>=20
> On Sun, Mar 30, 2014 at 1:19 AM, Alexander Kriegisch <
> Alexander@kriegisch.name> wrote:
>=20
>> FYI, this idea did not work. I still need help.
>>=20
>> Maybe defining a BOM is the way to go, but I would prefer to keep
>> everything in one repo and one project.
>> --
>> Alexander Kriegisch
>>=20
>>=20
>>> Am 29.03.2014 um 11:35 schrieb "Alexander Kriegisch" <
>> alexander@kriegisch.name>:
>>>=20
>>> Baptiste, Mirko,
>>>=20
>>> thanks for your answers. I was unable to override the scope in a
>> depending POM, I tried several approaches, e.g. redefining
>> "dependencyManagement" in the child POM - to no avail. I have heard about=

>> the rule/idiom "dependency mgmt overrides dependency scope" before, but I=

>> have not found a comprehensive (i.e. understandable) explanation with
>> concrete examples anywhere.
>>>=20
>>> Baptiste, how and why would an intermediate POM help me solve this
>> problem? I think it is rather funny to define an intermediate POM for jus=
t
>> one module needing it. If you could give me an example that would be grea=
t,
>> maybe then I understand better. My guess is you mean something like this:=

>>>=20
>>>=20
>>> Parent POM:
>>> ...
>>> <dependencyManagement><dependencies>
>>> <dependency>
>>>   <groupId>org.codehaus.groovy</groupId>
>>>   <artifactId>groovy-all</artifactId>
>>>   <version>${groovy-all.version}</version>
>>>   <scope>test</scope>
>>> </dependency>
>>> </dependencies></dependencyManagement>
>>> ...
>>> <dependencies>
>>> <dependency>
>>>   <groupId>org.codehaus.groovy</groupId>
>>>   <artifactId>groovy-all</artifactId>
>>> </dependency>
>>> </dependencies>
>>>=20
>>>=20
>>> Intermediate POM:
>>> ...
>>> <parent>[my parent POM]</parent>
>>> ...
>>> <dependencyManagement><dependencies>
>>> <dependency>
>>>   <groupId>org.codehaus.groovy</groupId>
>>>   <artifactId>groovy-all</artifactId>
>>>   <version>${groovy-all.version}</version>
>>>   <scope>compile</scope>
>>> </dependency>
>>> </dependencies></dependencyManagement>
>>>=20
>>>=20
>>> Child POM for module which needs groovy-all during runtime:
>>> ...
>>> <parent>[my intermediate POM]</parent>
>>> ...
>>> <dependencies>
>>> <dependency>
>>>   <groupId>org.codehaus.groovy</groupId>
>>>   <artifactId>groovy-all</artifactId>
>>> </dependency>
>>> </dependencies>
>>>=20
>>>=20
>>> Is that what you mean? Have you tested it? Does it really work? Please
>> correct my (untested, I am on the road) sketch if it is wrong.
>>>=20
>>>=20
>>> Baptiste Mathus schrieb am 28.03.2014 17:45:
>>>=20
>>>> IIUC, you have a unique parent pom (likely a "corporate pom"), let's ca=
n
>>>> him P. P says scope is test for groovy-all.
>>>>=20
>>>> You have modules m1, m2... who all inherits P.
>>>>=20
>>>> In some module mN, you need groovy-all with scope compile.
>>>>=20
>>>> But m1 actually depends on mN and will crash since the dependency onto
>>>> groovy-all isn't retrieved?
>>>>=20
>>>> If so, then this is expected. Dependency mgmt overrides the dependencie=
s
>>>> scope. One possible solution to centralize many redefinitions is to
>> create
>>>> an intermediate parent for those modules where you need groovy-all with=

>>>> scope compile.
>>>> I think that's what Mirko was proposing.
>>>>=20
>>>> Does that help?
>>>>=20
>>>>=20
>>>> Le 28 mars 2014 15:08, "Mirko Friedenhagen" <mfriedenhagen@gmail.com> a=

>>>> =C3=A9crit :
>>>>=20
>>>>> AFAIK you may override the scope in the inheriting poms. If I remember=

>>>>> correctly I did this with junit as I needed it for an selenium test
>>>>> project, where I had put base tests beneath src/main (to recite
>> Brecht: oh,
>>>>> don't ask why).
>>>>>=20
>>>>>=20
>>>>> On Mar 28, 2014 2:59 PM, "Alexander Kriegisch" <
>> Alexander@kriegisch.name>
>>>>> wrote:
>>>>>=20
>>>>>> I have a situation as follows:
>>>>>>=20
>>>>>> - Multi-module project (~30 modules)
>>>>>>=20
>>>>>> - Certain test dependencies (e.g. groovy-all) needed by nearly all
>>>>>>   sub-modules are declared directly with test scope in the parent POM=

>>>>>>   (not just dependencyManagement, but also dependency). I know this
>> is
>>>>>>   considered to be bad practice but it saves a lot of redundant
>>>>>>   dependency duplication.
>>>>>>=20
>>>>>> - One new sub-module now actually also needs groovy-all, but with a
>>>>>>   compile scope. So my wish (although seemingly unsupported by Maven)=

>>>>>>   is to override the default scope for this sub-module so as for the
>>>>>>   dependency to be actually available during runtime.
>>>>>>=20
>>>>>> How can I do this or work around the need to duplicate my test
>>>>>> dependencies in 30 modules just so as to be able to define the scope
>> for
>>>>>> the new module? AFAIK a POM can only inherit from one POM. But can I
>>>>>> somehow use an "included POM" in my 30 modules in order to be able to=

>>>>>> centrally manage the test dependencies? Sorry if I am explaining this=

>>>>>> wrong or using incorrect erms, but I am by no means a Maven pro.
>>>>>> Hopefully I was at least able to make my intent clear. I am looking
>> for
>>>>>> good advice beyond lecturing about how I should really, really declar=
e
>>>>>> everything 30 times in order to do it the Maven way. I am looking for=

>>>>>> alternatives, am willing to learn and hoping to get constructive
>> answers.
>>>>>>=20
>>>>>> Thanks you all in advance
>>>=20
>>> ---------------------------------------------------------------------
>>> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
>>> For additional commands, e-mail: users-help@maven.apache.org
>>=20
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
>> For additional commands, e-mail: users-help@maven.apache.org
>>=20
>>=20

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


