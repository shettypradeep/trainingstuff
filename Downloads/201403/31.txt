From users-return-135957-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Thu Mar 27 08:59:08 2014
Return-Path: <users-return-135957-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 64EA61147C
	for <apmail-maven-users-archive@www.apache.org>; Thu, 27 Mar 2014 08:59:08 +0000 (UTC)
Received: (qmail 84182 invoked by uid 500); 27 Mar 2014 08:59:04 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 83731 invoked by uid 500); 27 Mar 2014 08:59:02 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 83716 invoked by uid 99); 27 Mar 2014 08:59:01 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Thu, 27 Mar 2014 08:59:01 +0000
X-ASF-Spam-Status: No, hits=2.2 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_NONE,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of t.broyer@gmail.com designates 209.85.192.45 as permitted sender)
Received: from [209.85.192.45] (HELO mail-qg0-f45.google.com) (209.85.192.45)
    by apache.org (qpsmtpd/0.29) with ESMTP; Thu, 27 Mar 2014 08:58:57 +0000
Received: by mail-qg0-f45.google.com with SMTP id j5so2343914qga.4
        for <users@maven.apache.org>; Thu, 27 Mar 2014 01:58:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :content-type;
        bh=O4OlVmUIt59noCfkavIOxj25psg00JCM9BiNBVmpOcs=;
        b=VAwH3eDj17FxhrskeTFZ5yCGl2a/HtJmI/S81WrjeZdu7pKv66h6bLUtXsiYW+pscz
         v5EwH8nqa61lrZG3fOIrsE2ZL/yWVkpxPBWEdYDCrT3OY6SbVfMX7jPHBEGbTviTSpf8
         No9cZnBpC+y0Esxmhjc5pSYzVXdqncQUEfm6Vz0rW8duOvUcZRZQ62nrBOBD3V/JANSE
         UMmPrDgEAyBoK4mKdmLpcDVBEuQAFtntJ0gI0T3scfM/TfscDNoFHyOYU0AtHklJmknO
         IfTyk6C9LvetsCE3Ei8uscehQpWF9HaYQC0ImJ+ymG4AYjJ/oEHq0QCv6EDa3VeyP0u0
         OXxw==
X-Received: by 10.224.4.130 with SMTP id 2mr539007qar.45.1395910717055; Thu,
 27 Mar 2014 01:58:37 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.108.101 with HTTP; Thu, 27 Mar 2014 01:58:16 -0700 (PDT)
In-Reply-To: <1395909138436-5789681.post@n5.nabble.com>
References: <1395650439461-5789365.post@n5.nabble.com> <CAEayHEOGgV-7ZzoqTg7udryhk_by_Y8dADpwNNa9MxBXJHGQsA@mail.gmail.com>
 <1395909138436-5789681.post@n5.nabble.com>
From: Thomas Broyer <t.broyer@gmail.com>
Date: Thu, 27 Mar 2014 09:58:16 +0100
Message-ID: <CAEayHEMCboe7TbMuENpNFwo95k1KhU_4SeYX12jHL3jmEmL55g@mail.gmail.com>
Subject: Re: multi-module phases sequence
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a11c2da146dab1d04f592cae5
X-Virus-Checked: Checked by ClamAV on apache.org

--001a11c2da146dab1d04f592cae5
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

On Thu, Mar 27, 2014 at 9:32 AM, mkarg <karg@quipsy.de> wrote:

> This is weird. I mean, the POM contains all the information Maven needes =
to
> understand that e. g. a MVN test on the dependent module implies an (at
> least) MVN package on the dependency side. Otherwise the relationship
> provided in this multi-module project could not get fulfilled. So why is
> MVN
> not simply acting in a logical way and package the dependency even when t=
he
> invocation just enforced a MVN test?


Legacy I believe.


> That would do not harm and it would
> make everything work as one expects.
>

That's not entirely true.
It is true that creating moduleA:jar is generally done in the package
phase, but that's not enforced, and there are all those secondary artifacts
that can be packaged any time you want (e.g. at the verify phase).
If moduleB depends on moduleA:test-jar or module:java-sources, nothing
guarantees that they'd be packaged at the "package" phase of moduleA.
There's also the open issue that if you do a "mvn compile" (or "mvn
process-classes"), should Maven run the tests of moduleA (as part of
calling its "package" phase, as you're asking) before compiling moduleB?
And then there are also the custom lifecycles (but Maven already do a
rather bad job here as it tries to call the same phase in all projects in
the reactor)

The problem is that plugins do not tell Maven about their inputs and
outputs, so Maven cannot reason in terms of "what should I do before I can
do what I'm asked to do".
But even with that, it would be great, as a =E2=80=9Cworkaround=E2=80=9D, t=
o be able to
tell Maven, on the command line =E2=80=9Crun the package phase on all those
modules, and the test phase on those=E2=80=9D or even better =E2=80=9Crun t=
he test phase on
these modules and the package phase on all the modules they depend on=E2=80=
=9D
(enhanced =E2=80=9C-am=E2=80=9D).

See http://blog.ltgt.net/maven-is-broken-by-design for other issues with
how reactor (multi-module) builds are =E2=80=9Cbroken by design=E2=80=9D.

--=20
Thomas Broyer
/t=C9=94.ma.b=CA=81wa.je/ <http://xn--nna.ma.xn--bwa-xxb.je/>

--001a11c2da146dab1d04f592cae5--

