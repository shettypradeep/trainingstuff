From users-return-135826-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Mar 14 17:16:30 2014
Return-Path: <users-return-135826-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 41AA4C977
	for <apmail-maven-users-archive@www.apache.org>; Fri, 14 Mar 2014 17:16:30 +0000 (UTC)
Received: (qmail 65457 invoked by uid 500); 14 Mar 2014 17:16:24 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 65349 invoked by uid 500); 14 Mar 2014 17:16:23 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 65331 invoked by uid 99); 14 Mar 2014 17:16:21 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 14 Mar 2014 17:16:21 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of max.calderoni@gmail.com designates 209.85.214.170 as permitted sender)
Received: from [209.85.214.170] (HELO mail-ob0-f170.google.com) (209.85.214.170)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 14 Mar 2014 17:16:16 +0000
Received: by mail-ob0-f170.google.com with SMTP id uz6so2878618obc.1
        for <users@maven.apache.org>; Fri, 14 Mar 2014 10:15:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=efa0rRq9LJMcPyrOLf0kUbvRXmBKAnEElSTct4Kets4=;
        b=Uw+YvXMT/osc12KW6wJzvp4/w38Z0bGTKFd65eSo5H4EXOpApFQ1c9PRlxe3UEXrJo
         jGP9w1ETdB31cFQfGi+PVrH2TzrgyXbwqjmsQNhxLXYJojFtRpGeAgn5s50uiA90k1c9
         0SaRc/F6zfPA9U8HxJw4XdQtz+oyR514GQfspIpytt+Az3Kjz5DOIpHegPyvXR4svw4I
         aoYQPwgptSgdxLfYL9yW1W4QZpMi/QlEW1M0ZVOHZllacAxqGMuWnIow1d5lDgImtZ8g
         T6Qe74uZt0tLBPlhxrPuPDugHf6FIJnaisEnNgtHKVA+/WQ2ldfEnRJNU2baTmqBGSDP
         WVvg==
MIME-Version: 1.0
X-Received: by 10.182.233.201 with SMTP id ty9mr7800811obc.29.1394817355712;
 Fri, 14 Mar 2014 10:15:55 -0700 (PDT)
Received: by 10.182.11.102 with HTTP; Fri, 14 Mar 2014 10:15:55 -0700 (PDT)
In-Reply-To: <CAK8jvqzM_pGy+HbpCn3JYComZhZ3Kh3wYGF1xmofP7XWsp6THA@mail.gmail.com>
References: <CACY-B-ngxim3+f-5DxokhX_VpTWVmZ33UTRQJTej8qHqyMS43w@mail.gmail.com>
	<CADN69ykhVw86BWRm63WK46SoVp1w3aOxFAyuAb0CCuRQX4opGw@mail.gmail.com>
	<CACY-B-mfab_sXwfm3Hm9RzsS-S4xrWjaZ_0xtt4RRcKQqPDH=w@mail.gmail.com>
	<CAK8jvqzM_pGy+HbpCn3JYComZhZ3Kh3wYGF1xmofP7XWsp6THA@mail.gmail.com>
Date: Fri, 14 Mar 2014 10:15:55 -0700
Message-ID: <CACY-B-mpRJKoVZQvu1K_CuG5QncRm5KCyNCh7VO+LC_n1xN61g@mail.gmail.com>
Subject: Re: list all unique dependencies of multi-module project
From: Max Calderoni <max.calderoni@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a11c1c508038e8a04f49439bc
X-Virus-Checked: Checked by ClamAV on apache.org

--001a11c1c508038e8a04f49439bc
Content-Type: text/plain; charset=ISO-8859-1

Hello Mirko,

it's an idea. This that you describe in particular i cannot do, because it
will break containment (has implications with site generation, build, etc),
but i had tried a similar hack, by creating a dummy jar project that was
depending on every single module in the entire source tree.

It almost worked, but not quite, because other than being problematic
remembering to always add every module as a dependency to the dummy module
, both test and not, dependency:list will shrink a dependency to one scope
only. That is, it will not show that dependency A is used as 'compile'
somewhere and somewhere else as 'test', while we want to see that in a
report.

Seems to me that this problem cannot be resolved with the dependency plugin
alone, because dependencies can only be found by running the entire tree:
the container pom project will run as first in the reactor build order, not
as last.

Seems more of a problem for a reporting plugin, like for example the Maven
Project Info Reports Plugin.

I am going to ask a different question based on that, see if i can get an
answer.

Cheers,

Max


On Wed, Mar 12, 2014 at 10:34 PM, Mirko Friedenhagen <
mfriedenhagen@gmail.com> wrote:

> Hello Max,
>
> what about switching this to  a jar project without sources (maybe a readme
> txt as resource), which is not deployed or installed?
>
> Regards
> Mirko
>
>

--001a11c1c508038e8a04f49439bc--

