From users-return-136022-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Sun Mar 30 06:20:41 2014
Return-Path: <users-return-136022-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 0672E10B41
	for <apmail-maven-users-archive@www.apache.org>; Sun, 30 Mar 2014 06:20:41 +0000 (UTC)
Received: (qmail 52023 invoked by uid 500); 30 Mar 2014 06:20:37 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 50132 invoked by uid 500); 30 Mar 2014 06:20:25 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 50119 invoked by uid 99); 30 Mar 2014 06:20:22 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 30 Mar 2014 06:20:22 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: local policy)
Received: from [85.13.134.252] (HELO dd12814.kasserver.com) (85.13.134.252)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 30 Mar 2014 06:20:15 +0000
Received: from [192.168.178.45] (p57A1445F.dip0.t-ipconnect.de [87.161.68.95])
	by dd12814.kasserver.com (Postfix) with ESMTPSA id 8614811C0FAF;
	Sun, 30 Mar 2014 08:19:53 +0200 (CEST)
References: <53358021.6010103@Kriegisch.name> <CAK8jvqxy+wdkOwz89T=p7oMVUn-q1WhNt7GRTqU0ZZ=Z1nqp7w@mail.gmail.com> <CANWgJS4GjG5UqVxDM+k4ayLgN05er0CxX1mw8QcNzfKT=NgE9Q@mail.gmail.com> <20140329103503.3472511C0FD1@dd12814.kasserver.com>
In-Reply-To: <20140329103503.3472511C0FD1@dd12814.kasserver.com>
Mime-Version: 1.0 (1.0)
Content-Type: text/plain;
	charset=utf-8
Message-Id: <B8BD72DC-4BA8-4519-9860-72BBE04A2E02@Kriegisch.name>
Content-Transfer-Encoding: quoted-printable
X-Mailer: iPad Mail (11D167)
From: Alexander Kriegisch <Alexander@Kriegisch.name>
Subject: Re: Overriding dependency scope
Date: Sun, 30 Mar 2014 08:19:52 +0200
To: Maven Users List <users@maven.apache.org>
X-Virus-Checked: Checked by ClamAV on apache.org

FYI, this idea did not work. I still need help.

Maybe defining a BOM is the way to go, but I would prefer to keep everything=
 in one repo and one project.
--=20
Alexander Kriegisch


> Am 29.03.2014 um 11:35 schrieb "Alexander Kriegisch" <alexander@kriegisch.=
name>:
>=20
> Baptiste, Mirko,
>=20
> thanks for your answers. I was unable to override the scope in a depending=
 POM, I tried several approaches, e.g. redefining "dependencyManagement" in t=
he child POM - to no avail. I have heard about the rule/idiom "dependency mg=
mt overrides dependency scope" before, but I have not found a comprehensive (=
i.e. understandable) explanation with concrete examples anywhere.
>=20
> Baptiste, how and why would an intermediate POM help me solve this problem=
? I think it is rather funny to define an intermediate POM for just one modu=
le needing it. If you could give me an example that would be great, maybe th=
en I understand better. My guess is you mean something like this:
>=20
>=20
> Parent POM:
> ...
> <dependencyManagement><dependencies>
>  <dependency>
>    <groupId>org.codehaus.groovy</groupId>
>    <artifactId>groovy-all</artifactId>
>    <version>${groovy-all.version}</version>
>    <scope>test</scope>
>  </dependency>
> </dependencies></dependencyManagement>
> ...
> <dependencies>
>  <dependency>
>    <groupId>org.codehaus.groovy</groupId>
>    <artifactId>groovy-all</artifactId>
>  </dependency>
> </dependencies>
>=20
>=20
> Intermediate POM:
> ...
> <parent>[my parent POM]</parent>
> ...
> <dependencyManagement><dependencies>
>  <dependency>
>    <groupId>org.codehaus.groovy</groupId>
>    <artifactId>groovy-all</artifactId>
>    <version>${groovy-all.version}</version>
>    <scope>compile</scope>
>  </dependency>
> </dependencies></dependencyManagement>
>=20
>=20
> Child POM for module which needs groovy-all during runtime:
> ...
> <parent>[my intermediate POM]</parent>
> ...
> <dependencies>
>  <dependency>
>    <groupId>org.codehaus.groovy</groupId>
>    <artifactId>groovy-all</artifactId>
>  </dependency>
> </dependencies>
>=20
>=20
> Is that what you mean? Have you tested it? Does it really work? Please cor=
rect my (untested, I am on the road) sketch if it is wrong.
>=20
>=20
> Baptiste Mathus schrieb am 28.03.2014 17:45:
>=20
>> IIUC, you have a unique parent pom (likely a "corporate pom"), let's can
>> him P. P says scope is test for groovy-all.
>>=20
>> You have modules m1, m2... who all inherits P.
>>=20
>> In some module mN, you need groovy-all with scope compile.
>>=20
>> But m1 actually depends on mN and will crash since the dependency onto
>> groovy-all isn't retrieved?
>>=20
>> If so, then this is expected. Dependency mgmt overrides the dependencies
>> scope. One possible solution to centralize many redefinitions is to creat=
e
>> an intermediate parent for those modules where you need groovy-all with
>> scope compile.
>> I think that's what Mirko was proposing.
>>=20
>> Does that help?
>>=20
>>=20
>> Le 28 mars 2014 15:08, "Mirko Friedenhagen" <mfriedenhagen@gmail.com> a
>> =C3=A9crit :
>>=20
>>> AFAIK you may override the scope in the inheriting poms. If I remember
>>> correctly I did this with junit as I needed it for an selenium test
>>> project, where I had put base tests beneath src/main (to recite Brecht: o=
h,
>>> don't ask why).
>>>=20
>>>=20
>>> On Mar 28, 2014 2:59 PM, "Alexander Kriegisch" <Alexander@kriegisch.name=
>
>>> wrote:
>>>=20
>>>> I have a situation as follows:
>>>>=20
>>>>  - Multi-module project (~30 modules)
>>>>=20
>>>>  - Certain test dependencies (e.g. groovy-all) needed by nearly all
>>>>    sub-modules are declared directly with test scope in the parent POM
>>>>    (not just dependencyManagement, but also dependency). I know this is=

>>>>    considered to be bad practice but it saves a lot of redundant
>>>>    dependency duplication.
>>>>=20
>>>>  - One new sub-module now actually also needs groovy-all, but with a
>>>>    compile scope. So my wish (although seemingly unsupported by Maven)
>>>>    is to override the default scope for this sub-module so as for the
>>>>    dependency to be actually available during runtime.
>>>>=20
>>>> How can I do this or work around the need to duplicate my test
>>>> dependencies in 30 modules just so as to be able to define the scope fo=
r
>>>> the new module? AFAIK a POM can only inherit from one POM. But can I
>>>> somehow use an "included POM" in my 30 modules in order to be able to
>>>> centrally manage the test dependencies? Sorry if I am explaining this
>>>> wrong or using incorrect erms, but I am by no means a Maven pro.
>>>> Hopefully I was at least able to make my intent clear. I am looking for=

>>>> good advice beyond lecturing about how I should really, really declare
>>>> everything 30 times in order to do it the Maven way. I am looking for
>>>> alternatives, am willing to learn and hoping to get constructive answer=
s.
>>>>=20
>>>> Thanks you all in advance
>=20
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> For additional commands, e-mail: users-help@maven.apache.org

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


