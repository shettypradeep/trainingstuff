From users-return-135485-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Fri Feb 14 12:55:06 2014
Return-Path: <users-return-135485-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id DC21B104BF
	for <apmail-maven-users-archive@www.apache.org>; Fri, 14 Feb 2014 12:55:06 +0000 (UTC)
Received: (qmail 95785 invoked by uid 500); 14 Feb 2014 12:55:03 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 95384 invoked by uid 500); 14 Feb 2014 12:55:02 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 95372 invoked by uid 99); 14 Feb 2014 12:55:01 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 14 Feb 2014 12:55:01 +0000
X-ASF-Spam-Status: No, hits=-0.7 required=5.0
	tests=RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of jieryn@gmail.com designates 209.85.214.174 as permitted sender)
Received: from [209.85.214.174] (HELO mail-ob0-f174.google.com) (209.85.214.174)
    by apache.org (qpsmtpd/0.29) with ESMTP; Fri, 14 Feb 2014 12:54:58 +0000
Received: by mail-ob0-f174.google.com with SMTP id uy5so13803223obc.19
        for <users@maven.apache.org>; Fri, 14 Feb 2014 04:54:37 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type:content-transfer-encoding;
        bh=zMKyYug+XrYCimRI7h8sivJgxf93jP+YW40/JU0ub2k=;
        b=RKYbq6X9glfPKGN8mkcpYIteJOMU9Vl/nfMgQvdGy4Gkd2A6pe58XgaYje+X0/1LxC
         L6p/giHBgRssMB/AJepZjM7pAHUAtKPH6AQjHwek7fGR1vBeTqC5b8AwLbDswyWBqRLq
         zMogMV+P/Il4TJPjtHMZhIwCAOHszIOHqdM/s8LPE48fMPA+cAXHOHezMO98rXuho/6q
         H5BIZa5JeKaXhjcqcV17l8/3IHc20jghNp3f49P8VGTXHnd4x678bbq8+ccpffnLFOdy
         ROzpgHn/CKnxtP8X6ZjbA6qG4Fqfq1mgENFsmYo4EKCU0SmNn4RUu94D/9fMCmxqGge8
         7kPQ==
MIME-Version: 1.0
X-Received: by 10.182.153.41 with SMTP id vd9mr168858obb.87.1392382477500;
 Fri, 14 Feb 2014 04:54:37 -0800 (PST)
Received: by 10.182.86.229 with HTTP; Fri, 14 Feb 2014 04:54:37 -0800 (PST)
In-Reply-To: <9e5201cf2831$52f17c60$f8d47520$@berthonneau.com>
References: <9e5201cf2831$52f17c60$f8d47520$@berthonneau.com>
Date: Fri, 14 Feb 2014 07:54:37 -0500
Message-ID: <CAArU9ibqtC5MRwKiPsbVazweA64nmmcR9b1V=X+QNf3nTN4q-Q@mail.gmail.com>
Subject: Re: Code coverage with debug logs: 100% branch coverage not possible?...
From: jieryn <jieryn@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
X-Virus-Checked: Checked by ClamAV on apache.org

I have also been annoyed with what you describe, and have wondered how
to fill the gap of missing coverage.

Outside of copying the testcase and dynamically changing the log level
inside of it, which in addition to being burdensome, also offends my
DRY sensibility, the best idea I've had about this involves a
relatively new feature of JUnit called @Theories[1].

You could create @DataPoints {Level.ALL, Level.NONE} and then pass
them in to your test method. Then you dynamically set the class under
test's Logger.Level with the data point. I think this ought to work
just fine unless you execute your tests in parallel mode, as most
Logger declarations are as static instances.

There's one other problem which has prevented me from exploiting this
technique: @Theories needs a dedicated @RunWith(Theories.class). Which
would tend to preclude execution under @RunWith(Arquillian.class)
since @RunWith takes a singular runner argument, unless Aslak/someone
makes some tweaks[2].

[1] https://github.com/junit-team/junit/wiki/Theories
[2] https://issues.jboss.org/browse/ARQ-561


On Wed, Feb 12, 2014 at 3:30 PM, Beno=EEt Berthonneau
<benoit@berthonneau.com> wrote:
> Hi all,
>
>
>
> I need your opinion/way to tackle the following problem:
>
> In many projects we use a Logger (doesn't matter which implementation). I=
t
> is often recommend to test if the debug level is activated before logging=
 a
> debug trace like the following:
>
> if (logger.isDebugEnabled()) {
>
>     logger.debug("blah " + i + " in the loop that contains " + max);
>
> }
>
>
>
> Now when you run unit tests on this kind of code you need to make a choic=
e:
> run tests with INFO level or run tests with ALL traces activated. I choos=
e
> the second option in order to:
>
> *         Check that debug traces doesn't throw unwanted exception (like
> NPE)
>
> *         Have a better code coverage in term of covered lines
>
>
>
> But in term of branches coverage we could never have a 100% :(
>
>
>
> To me the only way to cover this is to run the tests suite 2 times: one w=
ith
> INFO traces configured, and another one with ALL traces activated.
>
> Did you face this issue and how did you solve it ?
>
>
>
> Thanks,
>
> Beno=EEt.
>

---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


