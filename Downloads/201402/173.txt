From users-return-135325-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Sun Feb  2 08:34:58 2014
Return-Path: <users-return-135325-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 4CD1810109
	for <apmail-maven-users-archive@www.apache.org>; Sun,  2 Feb 2014 08:34:58 +0000 (UTC)
Received: (qmail 54788 invoked by uid 500); 2 Feb 2014 08:34:53 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 54131 invoked by uid 500); 2 Feb 2014 08:34:44 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 54123 invoked by uid 99); 2 Feb 2014 08:34:42 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 02 Feb 2014 08:34:42 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of stephane.nicoll@gmail.com designates 209.85.216.180 as permitted sender)
Received: from [209.85.216.180] (HELO mail-qc0-f180.google.com) (209.85.216.180)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 02 Feb 2014 08:34:38 +0000
Received: by mail-qc0-f180.google.com with SMTP id i17so9434589qcy.39
        for <users@maven.apache.org>; Sun, 02 Feb 2014 00:34:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=8Xlvs31XtTzxnsXqzIhvcS5XwFteKVB8l76SGiBEKmY=;
        b=DMrx397bJL5TXQoCTibpjmLGohJH/IUnDmT40kjqQUogMBovqBrXPDwNQU8qKdYCQ/
         SoPEk0R1EVCPWK7perjepQazXfEUOWkI12ASNp90v36cd/5+rXDZ4Tg9WajC7hh36TiM
         D06ZU3Fmrw0p/4GbqmxEj7WUCd5mXCGmnS14N82cV1Bq5bK5y9IDPNfyCeSwTADeMLWr
         m0SelVaK4Y/O3EYzcMY79Pg9WZKr3LnxTWQ8FKJv6W3/qr/Mypnxl9sTxxdai9M6bnEo
         BM9DK3nx+2b+bm53Qv62q0ah7BwVVlzYL76hrsbNJIda0sfCtAGrfSdc2ugxgK4BJ/px
         T0mA==
MIME-Version: 1.0
X-Received: by 10.229.13.195 with SMTP id d3mr46183330qca.4.1391330057468;
 Sun, 02 Feb 2014 00:34:17 -0800 (PST)
Received: by 10.140.22.163 with HTTP; Sun, 2 Feb 2014 00:34:17 -0800 (PST)
In-Reply-To: <CAKDUN1v-0t+DhVnYi3CXFa_0UBs+KXXnR3jeDWqaETFQOO8r=Q@mail.gmail.com>
References: <CAOonohfsbrJ-7pxsEYFhLJvzb9KS+V6tnM0Je46Ep3m8YLFWSg@mail.gmail.com>
	<CAKDUN1vjCWVKV8BQZkjAW4Xb96z_41mhRmP=TNzLHxaX=YdCGg@mail.gmail.com>
	<CAOonohc6YwtXH-LtEHv3PGnv57cQ0YjWUvcTp9VZ1+Bj8DN7sQ@mail.gmail.com>
	<CAKDUN1v-0t+DhVnYi3CXFa_0UBs+KXXnR3jeDWqaETFQOO8r=Q@mail.gmail.com>
Date: Sun, 2 Feb 2014 09:34:17 +0100
Message-ID: <CAOonoheiu4EWX6p_g=FJHkRHqmBaG+PJoFbeS=7M9nh+DQhA5g@mail.gmail.com>
Subject: Re: dependency management across projects
From: Stephane Nicoll <stephane.nicoll@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a1133624cd7417e04f1684566
X-Virus-Checked: Checked by ClamAV on apache.org

--001a1133624cd7417e04f1684566
Content-Type: text/plain; charset=ISO-8859-1

On Fri, Jan 31, 2014 at 1:16 PM, Anders Hammar <anders@hammar.net> wrote:

> The release of the BOM would be that release of "a single coherent unit"
> then. It would specify the (marketing) version of the "platform" P.
> For example, P v1.0.0 will include v1.2.3 of SP1 (sub-product 1), v1.4.3 of
> SP2, etc.
>

Isn't it what I just write in my original post? (without mentioning the BOM)


>
> Creating the BOM would be a manual work I think, as you want to make sure
> that exactly the correct versions are included (might not be the latest
> releases).
>

Yes, this is already what I do. The very point I am trying to make here is
"how do you manage that manual BOM on a daily basis". Each sub-project has
its own release cycle and we cannot force the versions it has to use for a
specific branch. For instance, the product might state that the dependency
D should be 2.2.0 (because that's the latest or the one that people
generally use) but for backward compatibility reason SP2 has to use 1.8.0.

Creating manually the first BOM for P v1.0.0 isn't a problem: i've created
a set of tools that I am happy to share once they are fully ready. But
maintaining that BOM in the long run is more of a challenge (because we
can't force the sub-projects to use those versions so we have to monitor
what happens in each sub-project to take the appropriate version at the
product level).

Thanks again for the feedback!

S.


>
> /Anders
>
>
> >
> >
> > >
> > >
> > > There is also the possibility of creating a "grouping pom", which lists
> > all
> > > artifacts as dependencies. You would then declare a dependency to that
> > > grouping pom and get all deps magically sucked in. However, this is not
> > > really the "Maven way" in my opinion as you wouldn't specify your
> direct
> > > deps bu sort of relly on transitive deps. There are some fans of this
> > > approach though here on this list.
> > >
> > >
> > > > 2. Build configs that *force* each sub-project to run with the list
> of
> > > > dependencies for the project (to ensure all tests pass, etc). This is
> > to
> > > be
> > > > used alongside the regular build job for validation purpose
> > > >
> > >
> > > Maybe some enforcer rule?
> > >
> >
> > Like I said, this is to be used alongside the regular build job. So my
> SP4
> > 1.2.0-SNAPSHOT is building with a set of dependencies on its own and I
> want
> > to validate that with the dependencies of the target release for P, it is
> > also working just fine. It may just be the same ideally or slightly
> > different (or not slightly at all which requires an explicit validation).
> >
> > So I need to be able to swap those versions for validation purposes and
> run
> > the build with that.
> >
> > S.
> >
> >
> >
> > >
> > > /Anders
> > >
> > >
> > > >
> > > > I started to look at this and my first trial was to generate a report
> > > with
> > > > all the dependencies of each project and build a consolidated report
> > > that I
> > > > can match against the candidates. This would help manage the first
> goal
> > > as
> > > > if a dependency gets added, removed or updated, the global
> > > > dependencyManagement has to be impacted manually (do we upgrade or
> not,
> > > > etc).
> > > >
> > > > For the second part, it's not easy to force a dependency change in
> > Maven,
> > > > especially if the version has been specified at the project level.
> > > >
> > > > Thanks for reading that far. If you have any idea or know any
> > > organisation
> > > > that tried to implement that, I'd be interested
> > > >
> > > > Thanks!
> > > > S.
> > > >
> > >
> >
>

--001a1133624cd7417e04f1684566--

