From users-return-135436-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Feb 12 22:26:50 2014
Return-Path: <users-return-135436-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 46181107BC
	for <apmail-maven-users-archive@www.apache.org>; Wed, 12 Feb 2014 22:26:50 +0000 (UTC)
Received: (qmail 68279 invoked by uid 500); 12 Feb 2014 22:26:46 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 68213 invoked by uid 500); 12 Feb 2014 22:26:46 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 68205 invoked by uid 99); 12 Feb 2014 22:26:46 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 12 Feb 2014 22:26:46 +0000
X-ASF-Spam-Status: No, hits=-0.0 required=5.0
	tests=SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: local policy)
Received: from [24.37.79.202] (HELO smtp.artifact-software.com) (24.37.79.202)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 12 Feb 2014 22:26:40 +0000
Received: from localhost (localhost.localdomain [127.0.0.1])
	by smtp.artifact-software.com (Postfix) with ESMTP id 19D0C6A76F2
	for <users@maven.apache.org>; Wed, 12 Feb 2014 17:26:19 -0500 (EST)
X-Virus-Scanned: amavisd-new at artifact-software.com
Received: from smtp.artifact-software.com ([127.0.0.1])
	by localhost (smtp.artifact-software.com [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id m31AVlNf1xW2 for <users@maven.apache.org>;
	Wed, 12 Feb 2014 17:26:04 -0500 (EST)
Received: from [192.168.3.170] (unknown [192.168.3.170])
	by smtp.artifact-software.com (Postfix) with ESMTP id 91D876A76F1
	for <users@maven.apache.org>; Wed, 12 Feb 2014 17:26:04 -0500 (EST)
Message-ID: <52FBF4F1.8090701@artifact-software.com>
Date: Wed, 12 Feb 2014 17:25:53 -0500
From: Ron Wheeler <rwheeler@artifact-software.com>
Reply-To: Maven Users List <users@maven.apache.org>
Organization: Artifact Software
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.3.0
MIME-Version: 1.0
To: users@maven.apache.org
Subject: Re: Code coverage with debug logs: 100% branch coverage not possible?...
References: <9e5201cf2831$52f17c60$f8d47520$@berthonneau.com> <CABLGb9yyWxO8om2YE2Y-3v0RwLgB4RmY6cG9UK330DY4UVGHpQ@mail.gmail.com> <008101cf2834$fcf8d4d0$f6ea7e70$@berthonneau.com> <CAFBdXRp0KqmGHnDjjD3=_U94nh4HNo1zWrV5KNVRRxDeVSBjoQ@mail.gmail.com> <CAK8jvqytpdu2aa11qOrBjZhvjBShf97scfSVc4yRNnGQ9GVK_g@mail.gmail.com>
In-Reply-To: <CAK8jvqytpdu2aa11qOrBjZhvjBShf97scfSVc4yRNnGQ9GVK_g@mail.gmail.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-Virus-Checked: Checked by ClamAV on apache.org



Not really a Maven issue but if you do your logging like this:

package com.myco.testapp;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MyClass{
             private Logger 
_logger=LoggerFactory.getLogger(this.getClass());

       logger.debug(‚Äúblah {} in the loop that contains {}‚Ä?, i, max);

}

You can sort out the enabling of logs and destination of your logging by 
severity and class(I think by package as well) in the log configuration 
at run-time.

Ron

On 12/02/2014 4:20 PM, Mirko Friedenhagen wrote:
> Hello Benoit,
>
> Kevin is right, using slf4j[0] one would use sth. like:
>
> logger.debug(‚Äúblah {} in the loop that contains {}‚Ä?, i, max);
>
> No need for iffing :-).
>
> [0] http://www.slf4j.org/manual.html
> Regards Mirko
> --
> http://illegalstateexception.blogspot.com/
> https://github.com/mfriedenhagen/ (http://osrc.dfm.io/mfriedenhagen)
> https://bitbucket.org/mfriedenhagen/
>
>
> On Wed, Feb 12, 2014 at 10:10 PM, Kevin Krumwiede <kjkrum@gmail.com> wrote:
>> It does matter which implementation.  The main reason it was recommended to
>> check the logging level was because string concatenation can be expensive,
>> and you want to avoid doing it for a message that won't be logged.  But if
>> you're using a logging API like slf4j that uses parameter replacement
>> tokens in the message string, if the message isn't logged, the replacement
>> won't be performed and the call will be cheap.
>> On Feb 12, 2014 1:57 PM, "Beno√Æt Berthonneau" <benoit@berthonneau.com>
>> wrote:
>>
>>> Hi Paul,
>>>
>>>
>>>
>>> Don't think that I could play with exclusions. Here is an example :
>>>
>>>
>>>
>>> *A Unit Test :*
>>>
>>>
>>>
>>> *The tested class with ALL traces activated:*
>>>
>>>
>>>
>>> *And the same tested class with INFO traces activated:*
>>>
>>>
>>>
>>>
>>>
>>> -----Message d'origine-----
>>> De : paulus.benedictus@gmail.com [mailto:paulus.benedictus@gmail.com] De
>>> la part de Paul Benedict
>>> Envoy√© : mercredi 12 f√©vrier 2014 21:36
>>> √Ä : Maven Users List
>>> Objet : Re: Code coverage with debug logs: 100% branch coverage not
>>> possible?...
>>>
>>>
>>>
>>> IIRC, there should be an option in Emma/Cobertura that allows you to
>>> exclude coverage on certain classes. So if you can exclude your log4j
>>> classes (you don't really want to test your logging, do you?), then you
>>> should be able to raise your percentage.
>>>
>>>
>>>
>>>
>>>
>>> On Wed, Feb 12, 2014 at 2:30 PM, Beno√Æt Berthonneau
>>>
>>> <benoit@berthonneau.com>wrote:
>>>
>>>
>>>
>>>> Hi all,
>>>> I need your opinion/way to tackle the following problem:
>>>> In many projects we use a Logger (doesn't matter which
>>>> implementation). It is often recommend to test if the debug level is
>>>> activated before logging a debug trace like the following:
>>>> if (logger.isDebugEnabled()) {
>>>>      logger.debug("blah " + i + " in the loop that contains " + max);
>>>> }
>>>> Now when you run unit tests on this kind of code you need to make a
>>> choice:
>>>
>>>> run tests with INFO level or run tests with ALL traces activated. I
>>>> choose the second option in order to:
>>>> *         Check that debug traces doesn't throw unwanted exception (like
>>>> NPE)
>>>> *         Have a better code coverage in term of covered lines
>>>> But in term of branches coverage we could never have a 100% :(
>>>> To me the only way to cover this is to run the tests suite 2 times:
>>>> one with INFO traces configured, and another one with ALL traces
>>>> activated.
>>>> Did you face this issue and how did you solve it ?
>>>> Thanks,
>>>> Beno√Æt.
>>>
>>>
>>>
>>>
>>> --
>>>
>>> Cheers,
>>>
>>> Paul
>>>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> For additional commands, e-mail: users-help@maven.apache.org
>
>


-- 
Ron Wheeler
President
Artifact Software Inc
email: rwheeler@artifact-software.com
skype: ronaldmwheeler
phone: 866-970-2435, ext 102


---------------------------------------------------------------------
To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
For additional commands, e-mail: users-help@maven.apache.org


