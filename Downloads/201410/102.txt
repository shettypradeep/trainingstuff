From users-return-137546-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Mon Oct 13 09:14:23 2014
Return-Path: <users-return-137546-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 80951179E3
	for <apmail-maven-users-archive@www.apache.org>; Mon, 13 Oct 2014 09:14:23 +0000 (UTC)
Received: (qmail 26543 invoked by uid 500); 13 Oct 2014 09:14:21 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 26455 invoked by uid 500); 13 Oct 2014 09:14:21 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 26443 invoked by uid 99); 13 Oct 2014 09:14:21 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 13 Oct 2014 09:14:21 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of t.broyer@gmail.com designates 209.85.217.169 as permitted sender)
Received: from [209.85.217.169] (HELO mail-lb0-f169.google.com) (209.85.217.169)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 13 Oct 2014 09:13:55 +0000
Received: by mail-lb0-f169.google.com with SMTP id 10so6072705lbg.14
        for <users@maven.apache.org>; Mon, 13 Oct 2014 02:13:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :content-type;
        bh=vHSHEz8R2IwG53tahq9WylwSLRfEEFjeBmuGG1/pHuc=;
        b=PxMfJYBEQphnEA8vKlw69Odrf61OpgF4982rt+fKcouH1wG7gNEF5j3M8QGSxqgDBT
         H56ewx2z7RlN5v/6WoKeBE0B2wOptmfdD2zw0ktX3Xawzui2TMhjeilvsHhz2jmRkxN9
         sDn2jgN2Z9z1A4HucCMk/C3/Zhuvzh08t0SnaFPdEYEM+6kzNDNLXZmJYummQXKr7NpJ
         nwDkv44e9Kvlf8XzDAQMisDHiCKrEfGeIJlHQhU7/B1Rpw/ekhsjAFmk0U6OeT2Msoo4
         ehYMz12V1aXx1Rk9Fv++2FwZCNDe5DiYSSNqxvBayWMMi40dxvy5Fb21/9om0qAqtDkz
         e6Pw==
X-Received: by 10.152.3.35 with SMTP id 3mr22838374laz.5.1413191634896; Mon,
 13 Oct 2014 02:13:54 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.152.10.71 with HTTP; Mon, 13 Oct 2014 02:13:34 -0700 (PDT)
In-Reply-To: <CAKDUN1tJ+Sjqu8g06zGW+HcTjz1LuYXWHexCvW7J7GZhYWn+Aw@mail.gmail.com>
References: <CAEayHEPKOwsT2FdY0T_BxjjVO8qOAMhzp9vGbkew_t8Q26ppWg@mail.gmail.com>
 <CAKDUN1tJ+Sjqu8g06zGW+HcTjz1LuYXWHexCvW7J7GZhYWn+Aw@mail.gmail.com>
From: Thomas Broyer <t.broyer@gmail.com>
Date: Mon, 13 Oct 2014 11:13:34 +0200
Message-ID: <CAEayHEMZnTf_+xC5KwQ53Qa8C0qehEF3R9pdX0uNWsohQtVQ1g@mail.gmail.com>
Subject: Re: How to resolve artifacts while respecting projects' dependency
 management? (or finding an alternative)
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=089e0141a01065cdd405054a5103
X-Virus-Checked: Checked by ClamAV on apache.org

--089e0141a01065cdd405054a5103
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

On Mon, Oct 13, 2014 at 7:53 AM, Anders Hammar <anders@hammar.net> wrote:

> If it is a dependency only needed by the plugin in question (during build
> time) it should not be added to the project's dependencies. However, it
> should probably be added as a dependency to the plugin in the pom, hich
> will add it to the classpath for the plugin execution. However, AFAIK tha=
t
> section does not honor versions declared in the depMgmt section.
>

Remember, the goal is to add it to the project's deps to form a classpath
(for a forked JVM or URLClassLoader).
Not respecting dependencyManagement could cause conflicts and all sorts of
weird, hard-to-diagnose, bugs.

Actually, my use case is not much different from annotation processors
(assuming you don't leverage -processorpath): annotation processors are
only needed by the plugin running javac, but an annotation processor might
have a transitive dependency that the project also uses (at a minimum the
one that contains annotations that will be processed, but also various
helpers to generate Java code; think auto-commons, javawriter, maybe even
freemarker or velocity). What you'd want is the classpath containing the
project dependencies, and the annotation processor and its dependencies
that are not also project dependencies, all of that respecting
dependencyManagement. Actually, you'd want the classpath to look exactly as
if the annotation process was declared as a project dependency.

The problem with "plugin dependencies" is that you have less control on the
resolution process, specifically that dependencyManagement doesn't apply
there (which is a good thing, as it could break the plugin!)
Here, the plugin itself doesn't use the dependency so it doesn't need to be
in the plugin's classloader; so using a plugin dependency does not seem to
be a good idea either.

Another example: imagine JUnit was split into 2 JARs: one with the APIs and
one with the actual "runner". Now you'd include the former as a project
dependency but would expect Surefire to provide the latter, but you'd want
Surefire to use your project's dependencyManagement (let's say you use
<scope>import</scope> in your dependencyManagement to make sure all JUnit
deps use the same version, for example). This is actually the exact use
case I'm facing (just with other deps and another plugin); and in some
cases the project will have a direct dependency on the "junit-runner", in
which case you'd expect it to be used, and the plugin to not add anything.


> /Anders
>
> On Mon, Oct 13, 2014 at 1:17 AM, Thomas Broyer <t.broyer@gmail.com> wrote=
:
>
> > Hi all,
> >
> > I have a situation where a plugin needs to take the project's classpath
> and
> > add some elements to it. What I'd like is that the elements be resolved
> as
> > if they were declared as dependencies in the project's POM: take into
> > account dependencyManagement for the artifact's version and (more
> > importantly) its transitive dependencies.
> > How to do it? (in a way compatible with all Maven 3.x releases)
> >
> > Or do you think it'd be a better approach to just ask people add those
> > dependencies to their projects? They're tools needed for building the
> > project, but they don't need to be in the javac classpath. I tend to
> > believe this approach is much cleaner, but would appreciate external
> > feedback.
> > The plugin currently resolves the dependencies using maven-compat's
> > ArtifactResolver but I don't think this respects the projects
> > dependencyManagement (BTW, the "root" artifact passed comes from the
> > pluginArtifactMap); it also unconditionally add the JARs to the
> classpath,
> > which could cause conflicts I believe in some (edge-case) conditions. T=
he
> > first question I asked because I'd like to keep backwards compatibility
> and
> > try to fix things (or at least make them better), but if the best
> practice
> > is to add the dependencies to the project using the plugin, I'd just
> leave
> > resolution as it is today but disable it behind a flag (either the plug=
in
> > extends the classpath in some "broken" way, or you add the dependencies
> to
> > your project and the plugin just uses the project's classpath).
> >
> > --
> > Thomas Broyer
> > /t=C9=94.ma.b=CA=81wa.je/ <http://xn--nna.ma.xn--bwa-xxb.je/> <
> http://xn--nna.ma.xn--bwa-xxb.je/> <
> > http://xn--nna.ma.xn--bwa-xxb.je/>
> >
>



--=20
Thomas Broyer
/t=C9=94.ma.b=CA=81wa.je/ <http://xn--nna.ma.xn--bwa-xxb.je/>

--089e0141a01065cdd405054a5103--

