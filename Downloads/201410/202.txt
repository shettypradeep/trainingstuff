From users-return-137539-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Sun Oct 12 23:18:47 2014
Return-Path: <users-return-137539-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id DA0B717D3B
	for <apmail-maven-users-archive@www.apache.org>; Sun, 12 Oct 2014 23:18:47 +0000 (UTC)
Received: (qmail 44856 invoked by uid 500); 12 Oct 2014 23:18:46 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 44770 invoked by uid 500); 12 Oct 2014 23:18:45 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 44756 invoked by uid 99); 12 Oct 2014 23:18:45 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 12 Oct 2014 23:18:45 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of t.broyer@gmail.com designates 209.85.215.52 as permitted sender)
Received: from [209.85.215.52] (HELO mail-la0-f52.google.com) (209.85.215.52)
    by apache.org (qpsmtpd/0.29) with ESMTP; Sun, 12 Oct 2014 23:18:19 +0000
Received: by mail-la0-f52.google.com with SMTP id hz20so5915118lab.11
        for <users@maven.apache.org>; Sun, 12 Oct 2014 16:18:18 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:from:date:message-id:subject:to:content-type;
        bh=ptSj6rLFsv19mB/uZTVSrU4lRCbKoTWnnYh7u1JOmCg=;
        b=b80pmWCnQq8dDZC8fAN2R0QTfHCvVA6idtd6vpNH8M7PHxm41r5KPRKgiGz51eHC4j
         X6NEwu+Rop8TUQt8XwX5qFBmcVwhNNFHGZYpSN4dU/G2uSlQEPlN0K2EAGuFCsi1Zy+4
         5FL+3DOuFxXEvW0kP3eca/RJyINVnN4djI2NGskIxbBPLZbayOWJpb/TNn7jIAGohXcq
         iOkikm5dvLc5Ro+0zCu17iS0WBFhlRMdDzWckTlQ2wEr/hrF1spNtI1oVLEYFQNkfwEn
         /5O8BfrQO7fsEpLPrbL4R79WkFV4SlDFEXrdz2OHgrPAhRLjMuBG30bxgL3R3OSwD0My
         qmOg==
X-Received: by 10.112.148.170 with SMTP id tt10mr20013235lbb.61.1413155898320;
 Sun, 12 Oct 2014 16:18:18 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.152.10.71 with HTTP; Sun, 12 Oct 2014 16:17:58 -0700 (PDT)
From: Thomas Broyer <t.broyer@gmail.com>
Date: Mon, 13 Oct 2014 01:17:58 +0200
Message-ID: <CAEayHEPKOwsT2FdY0T_BxjjVO8qOAMhzp9vGbkew_t8Q26ppWg@mail.gmail.com>
Subject: How to resolve artifacts while respecting projects' dependency
 management? (or finding an alternative)
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=047d7b3a7d8e54ef1a050541ffc8
X-Virus-Checked: Checked by ClamAV on apache.org

--047d7b3a7d8e54ef1a050541ffc8
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hi all,

I have a situation where a plugin needs to take the project's classpath and
add some elements to it. What I'd like is that the elements be resolved as
if they were declared as dependencies in the project's POM: take into
account dependencyManagement for the artifact's version and (more
importantly) its transitive dependencies.
How to do it? (in a way compatible with all Maven 3.x releases)

Or do you think it'd be a better approach to just ask people add those
dependencies to their projects? They're tools needed for building the
project, but they don't need to be in the javac classpath. I tend to
believe this approach is much cleaner, but would appreciate external
feedback.
The plugin currently resolves the dependencies using maven-compat's
ArtifactResolver but I don't think this respects the projects
dependencyManagement (BTW, the "root" artifact passed comes from the
pluginArtifactMap); it also unconditionally add the JARs to the classpath,
which could cause conflicts I believe in some (edge-case) conditions. The
first question I asked because I'd like to keep backwards compatibility and
try to fix things (or at least make them better), but if the best practice
is to add the dependencies to the project using the plugin, I'd just leave
resolution as it is today but disable it behind a flag (either the plugin
extends the classpath in some "broken" way, or you add the dependencies to
your project and the plugin just uses the project's classpath).

--=20
Thomas Broyer
/t=C9=94.ma.b=CA=81wa.je/ <http://xn--nna.ma.xn--bwa-xxb.je/>

--047d7b3a7d8e54ef1a050541ffc8--

