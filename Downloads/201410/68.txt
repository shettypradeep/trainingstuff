From users-return-137655-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Oct 29 22:16:03 2014
Return-Path: <users-return-137655-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id C9A36172AD
	for <apmail-maven-users-archive@www.apache.org>; Wed, 29 Oct 2014 22:16:03 +0000 (UTC)
Received: (qmail 51305 invoked by uid 500); 29 Oct 2014 22:16:02 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 51222 invoked by uid 500); 29 Oct 2014 22:16:02 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 51204 invoked by uid 99); 29 Oct 2014 22:16:01 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 29 Oct 2014 22:16:01 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of baerrach@gmail.com designates 209.85.220.171 as permitted sender)
Received: from [209.85.220.171] (HELO mail-vc0-f171.google.com) (209.85.220.171)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 29 Oct 2014 22:15:33 +0000
Received: by mail-vc0-f171.google.com with SMTP id im17so2099425vcb.2
        for <users@maven.apache.org>; Wed, 29 Oct 2014 15:15:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=ra64KD00yAdokj22Aj7xU4tzfRh0CF8ojiiGzOOZ6eo=;
        b=yPq6pnQ5r91fFrfrV4/GrRj6xv94aEy2TaxTSnY5hzzvidREjHKZFu3g31fwwT7BvJ
         gZC22zFInZaCVWh5CYTpL/gpB+GN1kudHIKx0KoiU4kIKFNMBmCMpHLnu8633perqkXJ
         FsZAL7QgcL35asm0CmnTjRhU+lYIkjV4Ohz18EjhqZ3taX3qduG0fzyvatODNsvqFPfd
         1IRhLsg90YCJLHqKNNP4pMA6SxuV7Ls62/Ph3aOmY0xs55ZbLkn1zww6SkBEZ6v2X48u
         Q8YxTXyPeFdAIFpJHzdpLCrmxY2fI6te+7nLjUP0gRhD/DiWgfMEUOpeAIfo0m3/w0nx
         /8Ag==
MIME-Version: 1.0
X-Received: by 10.220.82.199 with SMTP id c7mr6128563vcl.61.1414620932473;
 Wed, 29 Oct 2014 15:15:32 -0700 (PDT)
Received: by 10.220.90.76 with HTTP; Wed, 29 Oct 2014 15:15:32 -0700 (PDT)
In-Reply-To: <CADN69yn6Hp-e4faHw5SQK4uN1Lj1r_X5XZogC_yUdEcCv2NKmQ@mail.gmail.com>
References: <CAE8kHEwi-wqWygidE88k+SkM9zvoRyTro2GFEFmsW-ypkpSSiw@mail.gmail.com>
	<CADVp3v9Y+HTn-JPuYz_jAd3yoayW+xN0YyZZ5Gwof5=_fd9bEQ@mail.gmail.com>
	<CAE8kHEy7hsUUZx9webzFgELY1HsdZrVYvbr_j34BxB1kn-boHg@mail.gmail.com>
	<CADN69yn6Hp-e4faHw5SQK4uN1Lj1r_X5XZogC_yUdEcCv2NKmQ@mail.gmail.com>
Date: Thu, 30 Oct 2014 08:45:32 +1030
Message-ID: <CADVp3v_Mb2z_qkYGjOFiFxFUw+iwNU=N-m60-4-g6Ym-dodhsw@mail.gmail.com>
Subject: Re: [pre-verify over deploy]
From: Barrie Treloar <baerrach@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=089e016340382c10ad0506971ac7
X-Virus-Checked: Checked by ClamAV on apache.org

--089e016340382c10ad0506971ac7
Content-Type: text/plain; charset=UTF-8

On 30 October 2014 08:38, Curtis Rueden <ctrueden@wisc.edu> wrote:

> Hi Fay,
>
> > Could i define a intermediate repository, everytime they deploy,
> > jenkins will verify it.
>
> Why not have Jenkins do your deploys? I.e.: make it so that only Jenkins
> has deploy permission to your remote repository. So your devs can no longer
> run "mvn deploy" from the CLI and expect it to work, but instead just push
> to master (or whatever integration branch) and then Jenkins runs the build.
>
> Once Jenkins does your deploys, you can set up your jobs to test for more
> stringent conditions before actually doing the deploy. E.g.:
>
> $ git clean -fdx
> $ mvn clean install
> $ bin/verify-artifacts.sh
> $ mvn deploy
>
> And "verify-artifacts.sh" does whatever further programmatic testing you
> need.
>
> OTOH, in many cases, you don't need a shell script -- often times, you can
> get what you need using Maven plugins like Surefire, Failsafe, and
> Enforcer. If you go that route, it might be enough so that devs running
> "mvn deploy" won't deploy bad stuff to the repo by default (unless they are
> aggressive enough to run e.g. "mvn -DskipTests deploy" which would be
> pretty bold).
>
> Regards,
> Curtis


Whether its Jenkins, or a developer, you've still pushed a release that
could break the build.

This is where you need some isolation available to your workflow.

Stuff breaks - it happens, Fay needs to determine how they want to deal
with it.

--089e016340382c10ad0506971ac7--

