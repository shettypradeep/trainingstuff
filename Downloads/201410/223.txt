From users-return-137654-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Oct 29 22:10:23 2014
Return-Path: <users-return-137654-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id E5DD617257
	for <apmail-maven-users-archive@www.apache.org>; Wed, 29 Oct 2014 22:10:23 +0000 (UTC)
Received: (qmail 32198 invoked by uid 500); 29 Oct 2014 22:10:21 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 32112 invoked by uid 500); 29 Oct 2014 22:10:21 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 32100 invoked by uid 99); 29 Oct 2014 22:10:21 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 29 Oct 2014 22:10:21 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of ctrueden.wisc@gmail.com designates 209.85.213.176 as permitted sender)
Received: from [209.85.213.176] (HELO mail-ig0-f176.google.com) (209.85.213.176)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 29 Oct 2014 22:10:16 +0000
Received: by mail-ig0-f176.google.com with SMTP id l13so2388744iga.3
        for <users@maven.apache.org>; Wed, 29 Oct 2014 15:09:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:from:date:message-id
         :subject:to:content-type;
        bh=NLldD1JK7+HoBZDiuEzJvbeMYZyk2+KsaUoners5YI4=;
        b=kNg5Tg1Jzx8OsJUpyYjyEHD3skkrMhzQJaYjZfMoeBy2f1AyTJOBSJlm9a0vofh/1r
         kdVVOm/2tlFU+u/llrCwvtEHKFXJ6d+qZgmUjERdBdj8X0gzlrmxttUZUMxd6H/ElCl0
         5B6Az66VDCWKU03SBqbmHSftNzVDlH/VYivag2qP7+ygNQJQYR/xT00uVowIgommccPp
         2zwxVQXTjXreFeBTublF1p862FN1dEUqOi3kbH6l++MUrQfJpergULlBirl/gOBDskB2
         dTSdBfivApzguKewRqjcgBepYa1TO3ZfI2XEOdTKmvIO3HDbCPWxKOCzylEl2g6uYQis
         CV/Q==
X-Received: by 10.50.50.228 with SMTP id f4mr15851320igo.49.1414620560800;
 Wed, 29 Oct 2014 15:09:20 -0700 (PDT)
MIME-Version: 1.0
Sender: ctrueden.wisc@gmail.com
Received: by 10.107.43.199 with HTTP; Wed, 29 Oct 2014 15:08:50 -0700 (PDT)
In-Reply-To: <CAE8kHEy7hsUUZx9webzFgELY1HsdZrVYvbr_j34BxB1kn-boHg@mail.gmail.com>
References: <CAE8kHEwi-wqWygidE88k+SkM9zvoRyTro2GFEFmsW-ypkpSSiw@mail.gmail.com>
 <CADVp3v9Y+HTn-JPuYz_jAd3yoayW+xN0YyZZ5Gwof5=_fd9bEQ@mail.gmail.com> <CAE8kHEy7hsUUZx9webzFgELY1HsdZrVYvbr_j34BxB1kn-boHg@mail.gmail.com>
From: Curtis Rueden <ctrueden@wisc.edu>
Date: Wed, 29 Oct 2014 17:08:50 -0500
X-Google-Sender-Auth: I4WAr9X5WmMDfylAtrH-K70odIY
Message-ID: <CADN69yn6Hp-e4faHw5SQK4uN1Lj1r_X5XZogC_yUdEcCv2NKmQ@mail.gmail.com>
Subject: Re: [pre-verify over deploy]
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=047d7bd75cb004c3230506970452
X-Virus-Checked: Checked by ClamAV on apache.org

--047d7bd75cb004c3230506970452
Content-Type: text/plain; charset=UTF-8

Hi Fay,

> Could i define a intermediate repository, everytime they deploy,
> jenkins will verify it.

Why not have Jenkins do your deploys? I.e.: make it so that only Jenkins
has deploy permission to your remote repository. So your devs can no longer
run "mvn deploy" from the CLI and expect it to work, but instead just push
to master (or whatever integration branch) and then Jenkins runs the build.

Once Jenkins does your deploys, you can set up your jobs to test for more
stringent conditions before actually doing the deploy. E.g.:

$ git clean -fdx
$ mvn clean install
$ bin/verify-artifacts.sh
$ mvn deploy

And "verify-artifacts.sh" does whatever further programmatic testing you
need.

OTOH, in many cases, you don't need a shell script -- often times, you can
get what you need using Maven plugins like Surefire, Failsafe, and
Enforcer. If you go that route, it might be enough so that devs running
"mvn deploy" won't deploy bad stuff to the repo by default (unless they are
aggressive enough to run e.g. "mvn -DskipTests deploy" which would be
pretty bold).

Regards,
Curtis

On Wed, Oct 29, 2014 at 3:18 AM, Fay Wong <philip584521@gmail.com> wrote:

> Many thanks to Barrie.
>
> I think what you have clarified is the normal flow of maven practice.
>
> The "deploy" in the context of my previous post means: our developer invoke
> a "mvn deploy" command to share the output(bytecode) through the repository
> so as to shorten the build time of whole project(as its code base is too
> large). Our goal is modular compiling and packaging.
>
> Currently my pain is our developer would deploy broken bytecode to our dev
> repository and broken others work. Could i define a intermediate
> repository, everytime they deploy, jenkins will verify it. if pass, then
> depoy it into dev repository, otherwise, revert the intermediate repository
> to keep sync with dev repository.
>
> Is there a easier way to achieve this?
>
> 2014-10-29 13:07 GMT+08:00 Barrie Treloar <baerrach@gmail.com>:
>
> > On 29 October 2014 14:00, Fay Wong <philip584521@gmail.com> wrote:
> >
> > > Hi all,
> > >
> > > Is there any solution to pre-verify the deploy before it actually got
> > into
> > > the repository?
> > >
> > > Take this usecase for example:
> > >
> > > In a team of 40 developer, every developer will deploy their module at
> > any
> > > time, once there's a error,
> > >
> > > the final output software won't work and blocks other developer's flow.
> > >
> > > So is there any pre-verify solution(such as jenkins CI-server) to be
> > > enforced before the deploy overlapped the previous deploy?
> >
> >
> > Not really, this is a process issue.
> >
> > You need to decide what is in a state of flux, and then when people
> should
> > consume it.
> >
> > I'm assuming by "deploy" you mean a released artifact and not a snapshot
> > one.
> > Generally, you should not be deploying your snapshots for consumption by
> > other developers, as snapshots could break at any time and you impact
> > anyone who depends upon them.
> > Instead, when a developer needs a snapshot version they check out the
> code
> > and building it themselves, then when they need to import new changes
> they
> > pull in the changes to the code and rebuild. That way the developer gets
> to
> > choose when they will consume potentially breaking changes.
> >
> > If these are released artifacts then you have lots of choices on how to
> do
> > this.
> > *) By using your version control system and some form of isolation (e.g.
> > branches).
> >    When the new version is released the developer still needs to pull
> those
> > changes in, and if there are breaking changes can revert back to the
> > previous version.
> > *) Have someone in a QA role validate that the artifact works prior to
> > promoting that version in you parent pom.
> >
> > The act of deploying into your Maven Repository is independent from the
> > consumption of that artifact, it shouldn't be breaking peoples build
> until
> > they start using it.
> >
>

--047d7bd75cb004c3230506970452--

