From users-return-137643-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Wed Oct 29 05:09:35 2014
Return-Path: <users-return-137643-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 4DCC21799C
	for <apmail-maven-users-archive@www.apache.org>; Wed, 29 Oct 2014 05:09:35 +0000 (UTC)
Received: (qmail 62663 invoked by uid 500); 29 Oct 2014 05:09:33 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 62583 invoked by uid 500); 29 Oct 2014 05:09:33 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 62569 invoked by uid 99); 29 Oct 2014 05:09:33 -0000
Received: from nike.apache.org (HELO nike.apache.org) (192.87.106.230)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 29 Oct 2014 05:09:33 +0000
X-ASF-Spam-Status: No, hits=1.5 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS
X-Spam-Check-By: apache.org
Received-SPF: pass (nike.apache.org: domain of baerrach@gmail.com designates 209.85.220.179 as permitted sender)
Received: from [209.85.220.179] (HELO mail-vc0-f179.google.com) (209.85.220.179)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 29 Oct 2014 05:09:06 +0000
Received: by mail-vc0-f179.google.com with SMTP id ij19so1160914vcb.24
        for <users@maven.apache.org>; Tue, 28 Oct 2014 22:07:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=dUKGtNI/AlP/ZEQRO73eX1hBSmTwXupoAQQ2zmvMgVc=;
        b=wqHhyK5P/3aDZBlJJLE8AYy78AsaXtqVxS6U5FI6ib94KOtSJlJDTKiOJG6Q7nhuDU
         dVZ2+hcbGmpte3IrDmKBYqUnIx8ZYf0cTfCHkH4tDjhVZ0+D9fO5YwPCBI/2TiQ1ygr3
         zKCAP0+LBTWG2WABaRZaHB1+HeCEMMNfoGnd1GIOIXxhiOxio19bRP8U9RSU3p99K7Sn
         x63mE7VgT3qIFlotl37e36I/iSVLZAsh/laByJc9UZImP7s5y9Glq76H9SopAIMCO0Fu
         fgBd2/eWj1eQFHK57tv1F9P4lYl5/CCcuQnmP98ILI9+j5stF241wm/qnRuJBf7Wl+bG
         vvvg==
MIME-Version: 1.0
X-Received: by 10.221.20.198 with SMTP id qp6mr5543065vcb.18.1414559254949;
 Tue, 28 Oct 2014 22:07:34 -0700 (PDT)
Received: by 10.220.90.76 with HTTP; Tue, 28 Oct 2014 22:07:34 -0700 (PDT)
In-Reply-To: <CAE8kHEwi-wqWygidE88k+SkM9zvoRyTro2GFEFmsW-ypkpSSiw@mail.gmail.com>
References: <CAE8kHEwi-wqWygidE88k+SkM9zvoRyTro2GFEFmsW-ypkpSSiw@mail.gmail.com>
Date: Wed, 29 Oct 2014 15:37:34 +1030
Message-ID: <CADVp3v9Y+HTn-JPuYz_jAd3yoayW+xN0YyZZ5Gwof5=_fd9bEQ@mail.gmail.com>
Subject: Re: [pre-verify over deploy]
From: Barrie Treloar <baerrach@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=001a11339eb2e7b846050688bd28
X-Virus-Checked: Checked by ClamAV on apache.org

--001a11339eb2e7b846050688bd28
Content-Type: text/plain; charset=UTF-8

On 29 October 2014 14:00, Fay Wong <philip584521@gmail.com> wrote:

> Hi all,
>
> Is there any solution to pre-verify the deploy before it actually got into
> the repository?
>
> Take this usecase for example:
>
> In a team of 40 developer, every developer will deploy their module at any
> time, once there's a error,
>
> the final output software won't work and blocks other developer's flow.
>
> So is there any pre-verify solution(such as jenkins CI-server) to be
> enforced before the deploy overlapped the previous deploy?


Not really, this is a process issue.

You need to decide what is in a state of flux, and then when people should
consume it.

I'm assuming by "deploy" you mean a released artifact and not a snapshot
one.
Generally, you should not be deploying your snapshots for consumption by
other developers, as snapshots could break at any time and you impact
anyone who depends upon them.
Instead, when a developer needs a snapshot version they check out the code
and building it themselves, then when they need to import new changes they
pull in the changes to the code and rebuild. That way the developer gets to
choose when they will consume potentially breaking changes.

If these are released artifacts then you have lots of choices on how to do
this.
*) By using your version control system and some form of isolation (e.g.
branches).
   When the new version is released the developer still needs to pull those
changes in, and if there are breaking changes can revert back to the
previous version.
*) Have someone in a QA role validate that the artifact works prior to
promoting that version in you parent pom.

The act of deploying into your Maven Repository is independent from the
consumption of that artifact, it shouldn't be breaking peoples build until
they start using it.

--001a11339eb2e7b846050688bd28--

