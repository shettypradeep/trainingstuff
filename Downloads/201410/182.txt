From users-return-137468-apmail-maven-users-archive=maven.apache.org@maven.apache.org  Mon Oct  6 10:16:54 2014
Return-Path: <users-return-137468-apmail-maven-users-archive=maven.apache.org@maven.apache.org>
X-Original-To: apmail-maven-users-archive@www.apache.org
Delivered-To: apmail-maven-users-archive@www.apache.org
Received: from mail.apache.org (hermes.apache.org [140.211.11.3])
	by minotaur.apache.org (Postfix) with SMTP id 9BB2217799
	for <apmail-maven-users-archive@www.apache.org>; Mon,  6 Oct 2014 10:16:54 +0000 (UTC)
Received: (qmail 98716 invoked by uid 500); 6 Oct 2014 10:16:53 -0000
Delivered-To: apmail-maven-users-archive@maven.apache.org
Received: (qmail 98620 invoked by uid 500); 6 Oct 2014 10:16:53 -0000
Mailing-List: contact users-help@maven.apache.org; run by ezmlm
Precedence: bulk
List-Unsubscribe: <mailto:users-unsubscribe@maven.apache.org>
List-Help: <mailto:users-help@maven.apache.org>
List-Post: <mailto:users@maven.apache.org>
List-Id: "Maven Users List" <users.maven.apache.org>
Reply-To: "Maven Users List" <users@maven.apache.org>
Delivered-To: mailing list users@maven.apache.org
Received: (qmail 98608 invoked by uid 99); 6 Oct 2014 10:16:52 -0000
Received: from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 06 Oct 2014 10:16:52 +0000
X-ASF-Spam-Status: No, hits=1.8 required=5.0
	tests=HTML_MESSAGE,RCVD_IN_DNSWL_LOW,SPF_PASS,URIBL_RHS_DOB
X-Spam-Check-By: apache.org
Received-SPF: pass (athena.apache.org: domain of stephen.alan.connolly@gmail.com designates 209.85.218.41 as permitted sender)
Received: from [209.85.218.41] (HELO mail-oi0-f41.google.com) (209.85.218.41)
    by apache.org (qpsmtpd/0.29) with ESMTP; Mon, 06 Oct 2014 10:16:48 +0000
Received: by mail-oi0-f41.google.com with SMTP id u20so3387180oif.28
        for <users@maven.apache.org>; Mon, 06 Oct 2014 03:16:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        bh=SBW99V9rQFfl/RcaTuolMLFnQI9WUnbAQuC8mcJbEu8=;
        b=L1tLq7RaIKYAvwEPRo/4uJb0UwTgGixHI+4IA+IfjDiwsz1Hzd/LGd3Xk4tTm0nfJG
         BZcYdCM7/r/3xeFvWULy0CMsyLt+gypzn1eydeJqgcnZg6qd08Tn0JMHZqAIqsOd85ne
         ALg7rr/K2pbS5D5xX0DxU3nthLaOaxy1uha29jo7gAt+h2OMgnibr4DhAjeXiagpaRv0
         80GhLtpphe3n9Xkrp5P/V4fXBEH53l2atk9vcCh525t/RCa9EEDtxaqqcg43NAPltuZJ
         3v1AUsgiXS3vgBPXqXc0qLdV5cV10l+7U1CnCYSUteURHvDWfOpP+03V8T5U8YClYrWe
         PYLA==
MIME-Version: 1.0
X-Received: by 10.60.16.197 with SMTP id i5mr25494477oed.31.1412590587321;
 Mon, 06 Oct 2014 03:16:27 -0700 (PDT)
Received: by 10.60.116.39 with HTTP; Mon, 6 Oct 2014 03:16:27 -0700 (PDT)
In-Reply-To: <CAFDw+_MfUVBB=t_REqDSniErVuw9CXVpfsnmc9Krv=L69ZkZUA@mail.gmail.com>
References: <CAFDw+_MfUVBB=t_REqDSniErVuw9CXVpfsnmc9Krv=L69ZkZUA@mail.gmail.com>
Date: Mon, 6 Oct 2014 11:16:27 +0100
Message-ID: <CA+nPnMyajL-2WYQojVG8RC6LCFeOns-P3TAHJgz+WE09irHoNg@mail.gmail.com>
Subject: Re: Running integration tests
From: Stephen Connolly <stephen.alan.connolly@gmail.com>
To: Maven Users List <users@maven.apache.org>
Content-Type: multipart/alternative; boundary=089e011833e82ba3a80504be6072
X-Virus-Checked: Checked by ClamAV on apache.org

--089e011833e82ba3a80504be6072
Content-Type: text/plain; charset=UTF-8

On 6 October 2014 10:31, Robert Mark Bram <robertmarkbram@gmail.com> wrote:

> Hi All,
>
> A couple of questions about integration tests..
>
>
> 1) Default vs non-default plugins
> I needed to include the maven-failsafe-plugin plugin to introduce
> integration tests into my project, but I didn't need to introduce the
> maven-surefire-plugin to my pom.xml for unit tests. Fair enough, but
> how do I know which plugins are included by default?
>

> suddenly a White Rabbit with pink eyes ran close by Alice

In your pom.xml there is a xml node /project/packaging that specifies the
lifecycle for your project.

You may not have set the value to anything, as the default if unspecified
is: jar

> There was nothing so very remarkable in that; nor did Alice think it so
very much out of the way to hear the Rabbit say to itself "Oh dear! Oh
dear! I shall be too late!"

Maven consults all the registered extensions and the core functionality to
see what lifecycles are registered for the packaging of the module it is
building.

In general it will end up here:
https://github.com/apache/maven/blob/276c7636d342f6d01353ae862b56fa89614b17a9/maven-core/src/main/resources/META-INF/plexus/components.xml#L33

> but, when the Rabbit actually took a watch out of its waistcoat-pocket,
and looked at it, and then hurried on, Alice started to her feet, for it
flashed across her mind that she had never before seen a rabbit with either
a waistcoat-pocket, or a watch to take out of it, and burning with
curiosity, she ran across the field after it, and was just in time to see
it pop down a large rabbit-hole under the hedge.

Once Maven has determined the lifecycle(s) that apply to your module, it
then looks up the phases and goals that you specified when invoking Maven.

>From this list of phases and goals it starts to construct the build plan...

Conceptually, at the start the build plan is just the list of phases to
execute.

So for example you type: `mvn clean install clean deploy site-deploy`

Then Maven says, ok clean comes from the `clean` lifecycle, and it is the
second phase... so we will start off with: pre-clean, clean

Next we need install, so that's from the default lifecycle and we will add
in the phases: validate, initialize, generate-sources, process-sources,
generate-resources, process-resources, compile, process-classes,
generate-test-sources, process-test-sources, generate-test-resources,
process-test-resources, test-compile, process-test-classes, test,
prepare-package, package, pre-integration-test, integration-test,
post-integration-test, verify, install

Then we need another clean... at this point our list will be looking like:
pre-clean, clean, validate, initialize, generate-sources, process-sources,
generate-resources, process-resources, compile, process-classes,
generate-test-sources, process-test-sources, generate-test-resources,
process-test-resources, test-compile, process-test-classes, test,
prepare-package, package, pre-integration-test, integration-test,
post-integration-test, verify, install, pre-clean, clean

Then we need to go all the way up to deploy... so we'll have: pre-clean,
clean, validate, initialize, generate-sources, process-sources,
generate-resources, process-resources, compile, process-classes,
generate-test-sources, process-test-sources, generate-test-resources,
process-test-resources, test-compile, process-test-classes, test,
prepare-package, package, pre-integration-test, integration-test,
post-integration-test, verify, install, pre-clean, clean, validate,
initialize, generate-sources, process-sources, generate-resources,
process-resources, compile, process-classes, generate-test-sources,
process-test-sources, generate-test-resources, process-test-resources,
test-compile, process-test-classes, test, prepare-package, package,
pre-integration-test, integration-test, post-integration-test, verify,
install, deploy

And finally we need to run up the site lifecycle as far as site-deploy...
so now the complete list of phases to execute in order are: pre-clean,
clean, validate, initialize, generate-sources, process-sources,
generate-resources, process-resources, compile, process-classes,
generate-test-sources, process-test-sources, generate-test-resources,
process-test-resources, test-compile, process-test-classes, test,
prepare-package, package, pre-integration-test, integration-test,
post-integration-test, verify, install, pre-clean, clean, validate,
initialize, generate-sources, process-sources, generate-resources,
process-resources, compile, process-classes, generate-test-sources,
process-test-sources, generate-test-resources, process-test-resources,
test-compile, process-test-classes, test, prepare-package, package,
pre-integration-test, integration-test, post-integration-test, verify,
install, deploy, pre-site, site, post-site, site-deploy

> In another moment down went Alice after it, never once considering how in
the world she was to get out again.

Now Maven needs to decide exactly what it should do for each of those
phases.

So it starts by considering the default bindings: These again are
determined by the packaging. In the case of the jar packaging from core
that is defined here:
https://github.com/apache/maven/blob/276c7636d342f6d01353ae862b56fa89614b17a9/maven-core/src/main/resources/META-INF/plexus/default-bindings.xml

So everywhere that Maven sees the `test` phase it will add a binding of
surefire:
https://github.com/apache/maven/blob/276c7636d342f6d01353ae862b56fa89614b17a9/maven-core/src/main/resources/META-INF/plexus/default-bindings.xml#L82
the binding defined the default plugin version but if you specify a
different plugin version in your pom then the default is overridden.

Next Maven looks at the effective pom for your project to see if there are
any executions that are bound to phases.

At the end of this process, maven now has a list of ordered plugin goal
executions... and away it goes


>
> 2) Just run integration tests?
> I can see that unit tests are all classes with names like *Test.java
> and integration tests are all classes with names like IT.java. But mvn
> verify and mvn test seem to run all tests (unit and integrations). Is
> there a way to run just one or the other?
>

tweaking of
http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#skipTests
should get you there!


>
> 3) Run integration tests after compile?
> The real reason for question 2 is that I wish to run integration tests
> only after I have deployed the new application to ensure the
> integration tests run on the server with the new content. Is there a
> way to do this?
>
>
Sounds like you should consult my answer to a related question:
http://stackoverflow.com/questions/16935290/maven-deploy-webapp-to-tomcat-before-junit-test/16936585#16936585


> Thanks for any assistance!
>
> Rob
> :)
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: users-unsubscribe@maven.apache.org
> For additional commands, e-mail: users-help@maven.apache.org
>
>

--089e011833e82ba3a80504be6072--

